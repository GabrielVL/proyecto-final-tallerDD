$date
	Sat Jun 14 02:15:03 2025
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module computer_top_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 32 # Instr_tb [31:0] $end
$var reg 32 $ WriteData_tb [31:0] $end
$var reg 32 % DataAdr_tb [31:0] $end
$var reg 1 & MemWrite_tb $end
$var reg 32 ' PC_from_arm_tb [31:0] $end

$scope module dut $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var reg 32 * Instr_to_processor [31:0] $end
$var reg 32 + WriteData [31:0] $end
$var reg 32 , DataAdr [31:0] $end
$var reg 1 - MemWrite $end
$var reg 32 . PC_from_arm [31:0] $end
$var reg 32 / Instr_internal [31:0] $end
$var reg 32 0 ReadData [31:0] $end

$scope module arm_processor $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 1 Instr [31] $end
$var wire 1 2 Instr [30] $end
$var wire 1 3 Instr [29] $end
$var wire 1 4 Instr [28] $end
$var wire 1 5 Instr [27] $end
$var wire 1 6 Instr [26] $end
$var wire 1 7 Instr [25] $end
$var wire 1 8 Instr [24] $end
$var wire 1 9 Instr [23] $end
$var wire 1 : Instr [22] $end
$var wire 1 ; Instr [21] $end
$var wire 1 < Instr [20] $end
$var wire 1 = Instr [19] $end
$var wire 1 > Instr [18] $end
$var wire 1 ? Instr [17] $end
$var wire 1 @ Instr [16] $end
$var wire 1 A Instr [15] $end
$var wire 1 B Instr [14] $end
$var wire 1 C Instr [13] $end
$var wire 1 D Instr [12] $end
$var wire 1 E Instr [11] $end
$var wire 1 F Instr [10] $end
$var wire 1 G Instr [9] $end
$var wire 1 H Instr [8] $end
$var wire 1 I Instr [7] $end
$var wire 1 J Instr [6] $end
$var wire 1 K Instr [5] $end
$var wire 1 L Instr [4] $end
$var wire 1 M Instr [3] $end
$var wire 1 N Instr [2] $end
$var wire 1 O Instr [1] $end
$var wire 1 P Instr [0] $end
$var reg 32 Q ReadData [31:0] $end
$var reg 32 R WriteData [31:0] $end
$var reg 32 S DataAdr [31:0] $end
$var reg 1 T MemWrite $end
$var reg 32 U PC [31:0] $end
$var reg 32 V ALUResult [31:0] $end
$var reg 4 W ALUFlags [3:0] $end
$var reg 1 X MemtoReg_from_decoder $end
$var reg 1 Y ALUSrc_from_decoder $end
$var reg 1 Z PCSrc_final $end
$var reg 1 [ Stall_final $end
$var reg 2 \ RegSrc [1:0] $end
$var reg 2 ] ImmSrc [1:0] $end
$var reg 3 ^ ALUControl [2:0] $end
$var reg 1 _ PCS_ALU_SrcA $end
$var reg 4 ` Cond [3:0] $end
$var reg 2 a FlagW [1:0] $end
$var reg 1 b RegWrite_from_decoder $end
$var reg 1 c MemWrite_from_decoder $end
$var reg 1 d PCS_from_decoder $end
$var reg 1 e RegWrite_final $end
$var reg 1 f MemWrite_final_for_output $end

$scope module processor $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 g Stall $end
$var wire 1 h RegSrc [1] $end
$var wire 1 i RegSrc [0] $end
$var wire 1 j ImmSrc [1] $end
$var wire 1 k ImmSrc [0] $end
$var wire 1 l RegWrite $end
$var wire 1 m ALUSrc $end
$var wire 1 n ALUControl [2] $end
$var wire 1 o ALUControl [1] $end
$var wire 1 p ALUControl [0] $end
$var wire 1 q MemtoReg $end
$var wire 1 r PCSrc $end
$var wire 1 s PCS_ALU_SrcA $end
$var reg 4 t ALUFlags [3:0] $end
$var reg 32 u PC [31:0] $end
$var reg 32 v ALUResult [31:0] $end
$var reg 32 w WriteData [31:0] $end
$var wire 1 1 Instr [31] $end
$var wire 1 2 Instr [30] $end
$var wire 1 3 Instr [29] $end
$var wire 1 4 Instr [28] $end
$var wire 1 5 Instr [27] $end
$var wire 1 6 Instr [26] $end
$var wire 1 7 Instr [25] $end
$var wire 1 8 Instr [24] $end
$var wire 1 9 Instr [23] $end
$var wire 1 : Instr [22] $end
$var wire 1 ; Instr [21] $end
$var wire 1 < Instr [20] $end
$var wire 1 = Instr [19] $end
$var wire 1 > Instr [18] $end
$var wire 1 ? Instr [17] $end
$var wire 1 @ Instr [16] $end
$var wire 1 A Instr [15] $end
$var wire 1 B Instr [14] $end
$var wire 1 C Instr [13] $end
$var wire 1 D Instr [12] $end
$var wire 1 E Instr [11] $end
$var wire 1 F Instr [10] $end
$var wire 1 G Instr [9] $end
$var wire 1 H Instr [8] $end
$var wire 1 I Instr [7] $end
$var wire 1 J Instr [6] $end
$var wire 1 K Instr [5] $end
$var wire 1 L Instr [4] $end
$var wire 1 M Instr [3] $end
$var wire 1 N Instr [2] $end
$var wire 1 O Instr [1] $end
$var wire 1 P Instr [0] $end
$var wire 1 x ReadData [31] $end
$var wire 1 y ReadData [30] $end
$var wire 1 z ReadData [29] $end
$var wire 1 { ReadData [28] $end
$var wire 1 | ReadData [27] $end
$var wire 1 } ReadData [26] $end
$var wire 1 ~ ReadData [25] $end
$var wire 1 !! ReadData [24] $end
$var wire 1 "! ReadData [23] $end
$var wire 1 #! ReadData [22] $end
$var wire 1 $! ReadData [21] $end
$var wire 1 %! ReadData [20] $end
$var wire 1 &! ReadData [19] $end
$var wire 1 '! ReadData [18] $end
$var wire 1 (! ReadData [17] $end
$var wire 1 )! ReadData [16] $end
$var wire 1 *! ReadData [15] $end
$var wire 1 +! ReadData [14] $end
$var wire 1 ,! ReadData [13] $end
$var wire 1 -! ReadData [12] $end
$var wire 1 .! ReadData [11] $end
$var wire 1 /! ReadData [10] $end
$var wire 1 0! ReadData [9] $end
$var wire 1 1! ReadData [8] $end
$var wire 1 2! ReadData [7] $end
$var wire 1 3! ReadData [6] $end
$var wire 1 4! ReadData [5] $end
$var wire 1 5! ReadData [4] $end
$var wire 1 6! ReadData [3] $end
$var wire 1 7! ReadData [2] $end
$var wire 1 8! ReadData [1] $end
$var wire 1 9! ReadData [0] $end
$var reg 32 :! PCNext [31:0] $end
$var reg 32 ;! PCPlus4 [31:0] $end
$var reg 32 <! PCPlus8 [31:0] $end
$var reg 32 =! ExtImm [31:0] $end
$var reg 32 >! SrcA_regfile [31:0] $end
$var reg 32 ?! SrcB [31:0] $end
$var reg 32 @! Result [31:0] $end
$var reg 4 A! RA1 [3:0] $end
$var reg 4 B! RA2 [3:0] $end
$var reg 32 C! SrcA [31:0] $end

$scope module pcreg $end
$var parameter 32 D! WIDTH $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 E! en $end
$var wire 1 F! d [31] $end
$var wire 1 G! d [30] $end
$var wire 1 H! d [29] $end
$var wire 1 I! d [28] $end
$var wire 1 J! d [27] $end
$var wire 1 K! d [26] $end
$var wire 1 L! d [25] $end
$var wire 1 M! d [24] $end
$var wire 1 N! d [23] $end
$var wire 1 O! d [22] $end
$var wire 1 P! d [21] $end
$var wire 1 Q! d [20] $end
$var wire 1 R! d [19] $end
$var wire 1 S! d [18] $end
$var wire 1 T! d [17] $end
$var wire 1 U! d [16] $end
$var wire 1 V! d [15] $end
$var wire 1 W! d [14] $end
$var wire 1 X! d [13] $end
$var wire 1 Y! d [12] $end
$var wire 1 Z! d [11] $end
$var wire 1 [! d [10] $end
$var wire 1 \! d [9] $end
$var wire 1 ]! d [8] $end
$var wire 1 ^! d [7] $end
$var wire 1 _! d [6] $end
$var wire 1 `! d [5] $end
$var wire 1 a! d [4] $end
$var wire 1 b! d [3] $end
$var wire 1 c! d [2] $end
$var wire 1 d! d [1] $end
$var wire 1 e! d [0] $end
$var reg 32 f! q [31:0] $end
$upscope $end

$scope module pcadd1 $end
$var parameter 32 g! WIDTH $end
$var wire 1 h! a [31] $end
$var wire 1 i! a [30] $end
$var wire 1 j! a [29] $end
$var wire 1 k! a [28] $end
$var wire 1 l! a [27] $end
$var wire 1 m! a [26] $end
$var wire 1 n! a [25] $end
$var wire 1 o! a [24] $end
$var wire 1 p! a [23] $end
$var wire 1 q! a [22] $end
$var wire 1 r! a [21] $end
$var wire 1 s! a [20] $end
$var wire 1 t! a [19] $end
$var wire 1 u! a [18] $end
$var wire 1 v! a [17] $end
$var wire 1 w! a [16] $end
$var wire 1 x! a [15] $end
$var wire 1 y! a [14] $end
$var wire 1 z! a [13] $end
$var wire 1 {! a [12] $end
$var wire 1 |! a [11] $end
$var wire 1 }! a [10] $end
$var wire 1 ~! a [9] $end
$var wire 1 !" a [8] $end
$var wire 1 "" a [7] $end
$var wire 1 #" a [6] $end
$var wire 1 $" a [5] $end
$var wire 1 %" a [4] $end
$var wire 1 &" a [3] $end
$var wire 1 '" a [2] $end
$var wire 1 (" a [1] $end
$var wire 1 )" a [0] $end
$var wire 1 *" b [31] $end
$var wire 1 +" b [30] $end
$var wire 1 ," b [29] $end
$var wire 1 -" b [28] $end
$var wire 1 ." b [27] $end
$var wire 1 /" b [26] $end
$var wire 1 0" b [25] $end
$var wire 1 1" b [24] $end
$var wire 1 2" b [23] $end
$var wire 1 3" b [22] $end
$var wire 1 4" b [21] $end
$var wire 1 5" b [20] $end
$var wire 1 6" b [19] $end
$var wire 1 7" b [18] $end
$var wire 1 8" b [17] $end
$var wire 1 9" b [16] $end
$var wire 1 :" b [15] $end
$var wire 1 ;" b [14] $end
$var wire 1 <" b [13] $end
$var wire 1 =" b [12] $end
$var wire 1 >" b [11] $end
$var wire 1 ?" b [10] $end
$var wire 1 @" b [9] $end
$var wire 1 A" b [8] $end
$var wire 1 B" b [7] $end
$var wire 1 C" b [6] $end
$var wire 1 D" b [5] $end
$var wire 1 E" b [4] $end
$var wire 1 F" b [3] $end
$var wire 1 G" b [2] $end
$var wire 1 H" b [1] $end
$var wire 1 I" b [0] $end
$var reg 32 J" y [31:0] $end
$upscope $end

$scope module pcadd2 $end
$var parameter 32 K" WIDTH $end
$var wire 1 L" a [31] $end
$var wire 1 M" a [30] $end
$var wire 1 N" a [29] $end
$var wire 1 O" a [28] $end
$var wire 1 P" a [27] $end
$var wire 1 Q" a [26] $end
$var wire 1 R" a [25] $end
$var wire 1 S" a [24] $end
$var wire 1 T" a [23] $end
$var wire 1 U" a [22] $end
$var wire 1 V" a [21] $end
$var wire 1 W" a [20] $end
$var wire 1 X" a [19] $end
$var wire 1 Y" a [18] $end
$var wire 1 Z" a [17] $end
$var wire 1 [" a [16] $end
$var wire 1 \" a [15] $end
$var wire 1 ]" a [14] $end
$var wire 1 ^" a [13] $end
$var wire 1 _" a [12] $end
$var wire 1 `" a [11] $end
$var wire 1 a" a [10] $end
$var wire 1 b" a [9] $end
$var wire 1 c" a [8] $end
$var wire 1 d" a [7] $end
$var wire 1 e" a [6] $end
$var wire 1 f" a [5] $end
$var wire 1 g" a [4] $end
$var wire 1 h" a [3] $end
$var wire 1 i" a [2] $end
$var wire 1 j" a [1] $end
$var wire 1 k" a [0] $end
$var wire 1 l" b [31] $end
$var wire 1 m" b [30] $end
$var wire 1 n" b [29] $end
$var wire 1 o" b [28] $end
$var wire 1 p" b [27] $end
$var wire 1 q" b [26] $end
$var wire 1 r" b [25] $end
$var wire 1 s" b [24] $end
$var wire 1 t" b [23] $end
$var wire 1 u" b [22] $end
$var wire 1 v" b [21] $end
$var wire 1 w" b [20] $end
$var wire 1 x" b [19] $end
$var wire 1 y" b [18] $end
$var wire 1 z" b [17] $end
$var wire 1 {" b [16] $end
$var wire 1 |" b [15] $end
$var wire 1 }" b [14] $end
$var wire 1 ~" b [13] $end
$var wire 1 !# b [12] $end
$var wire 1 "# b [11] $end
$var wire 1 ## b [10] $end
$var wire 1 $# b [9] $end
$var wire 1 %# b [8] $end
$var wire 1 &# b [7] $end
$var wire 1 '# b [6] $end
$var wire 1 (# b [5] $end
$var wire 1 )# b [4] $end
$var wire 1 *# b [3] $end
$var wire 1 +# b [2] $end
$var wire 1 ,# b [1] $end
$var wire 1 -# b [0] $end
$var reg 32 .# y [31:0] $end
$upscope $end

$scope module pcmux $end
$var parameter 32 /# WIDTH $end
$var wire 1 0# d0 [31] $end
$var wire 1 1# d0 [30] $end
$var wire 1 2# d0 [29] $end
$var wire 1 3# d0 [28] $end
$var wire 1 4# d0 [27] $end
$var wire 1 5# d0 [26] $end
$var wire 1 6# d0 [25] $end
$var wire 1 7# d0 [24] $end
$var wire 1 8# d0 [23] $end
$var wire 1 9# d0 [22] $end
$var wire 1 :# d0 [21] $end
$var wire 1 ;# d0 [20] $end
$var wire 1 <# d0 [19] $end
$var wire 1 =# d0 [18] $end
$var wire 1 ># d0 [17] $end
$var wire 1 ?# d0 [16] $end
$var wire 1 @# d0 [15] $end
$var wire 1 A# d0 [14] $end
$var wire 1 B# d0 [13] $end
$var wire 1 C# d0 [12] $end
$var wire 1 D# d0 [11] $end
$var wire 1 E# d0 [10] $end
$var wire 1 F# d0 [9] $end
$var wire 1 G# d0 [8] $end
$var wire 1 H# d0 [7] $end
$var wire 1 I# d0 [6] $end
$var wire 1 J# d0 [5] $end
$var wire 1 K# d0 [4] $end
$var wire 1 L# d0 [3] $end
$var wire 1 M# d0 [2] $end
$var wire 1 N# d0 [1] $end
$var wire 1 O# d0 [0] $end
$var wire 1 P# d1 [31] $end
$var wire 1 Q# d1 [30] $end
$var wire 1 R# d1 [29] $end
$var wire 1 S# d1 [28] $end
$var wire 1 T# d1 [27] $end
$var wire 1 U# d1 [26] $end
$var wire 1 V# d1 [25] $end
$var wire 1 W# d1 [24] $end
$var wire 1 X# d1 [23] $end
$var wire 1 Y# d1 [22] $end
$var wire 1 Z# d1 [21] $end
$var wire 1 [# d1 [20] $end
$var wire 1 \# d1 [19] $end
$var wire 1 ]# d1 [18] $end
$var wire 1 ^# d1 [17] $end
$var wire 1 _# d1 [16] $end
$var wire 1 `# d1 [15] $end
$var wire 1 a# d1 [14] $end
$var wire 1 b# d1 [13] $end
$var wire 1 c# d1 [12] $end
$var wire 1 d# d1 [11] $end
$var wire 1 e# d1 [10] $end
$var wire 1 f# d1 [9] $end
$var wire 1 g# d1 [8] $end
$var wire 1 h# d1 [7] $end
$var wire 1 i# d1 [6] $end
$var wire 1 j# d1 [5] $end
$var wire 1 k# d1 [4] $end
$var wire 1 l# d1 [3] $end
$var wire 1 m# d1 [2] $end
$var wire 1 n# d1 [1] $end
$var wire 1 o# d1 [0] $end
$var wire 1 r s $end
$var reg 32 p# y [31:0] $end
$upscope $end

$scope module ra1mux $end
$var parameter 32 q# WIDTH $end
$var wire 1 = d0 [3] $end
$var wire 1 > d0 [2] $end
$var wire 1 ? d0 [1] $end
$var wire 1 @ d0 [0] $end
$var wire 1 r# d1 [3] $end
$var wire 1 s# d1 [2] $end
$var wire 1 t# d1 [1] $end
$var wire 1 u# d1 [0] $end
$var wire 1 i s $end
$var reg 4 v# y [3:0] $end
$upscope $end

$scope module ra2mux $end
$var parameter 32 w# WIDTH $end
$var wire 1 M d0 [3] $end
$var wire 1 N d0 [2] $end
$var wire 1 O d0 [1] $end
$var wire 1 P d0 [0] $end
$var wire 1 A d1 [3] $end
$var wire 1 B d1 [2] $end
$var wire 1 C d1 [1] $end
$var wire 1 D d1 [0] $end
$var wire 1 h s $end
$var reg 4 x# y [3:0] $end
$upscope $end

$scope module rf $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 y# we3 $end
$var wire 1 z# ra1 [3] $end
$var wire 1 {# ra1 [2] $end
$var wire 1 |# ra1 [1] $end
$var wire 1 }# ra1 [0] $end
$var wire 1 ~# ra2 [3] $end
$var wire 1 !$ ra2 [2] $end
$var wire 1 "$ ra2 [1] $end
$var wire 1 #$ ra2 [0] $end
$var wire 1 A wa3 [3] $end
$var wire 1 B wa3 [2] $end
$var wire 1 C wa3 [1] $end
$var wire 1 D wa3 [0] $end
$var wire 1 $$ wd3 [31] $end
$var wire 1 %$ wd3 [30] $end
$var wire 1 &$ wd3 [29] $end
$var wire 1 '$ wd3 [28] $end
$var wire 1 ($ wd3 [27] $end
$var wire 1 )$ wd3 [26] $end
$var wire 1 *$ wd3 [25] $end
$var wire 1 +$ wd3 [24] $end
$var wire 1 ,$ wd3 [23] $end
$var wire 1 -$ wd3 [22] $end
$var wire 1 .$ wd3 [21] $end
$var wire 1 /$ wd3 [20] $end
$var wire 1 0$ wd3 [19] $end
$var wire 1 1$ wd3 [18] $end
$var wire 1 2$ wd3 [17] $end
$var wire 1 3$ wd3 [16] $end
$var wire 1 4$ wd3 [15] $end
$var wire 1 5$ wd3 [14] $end
$var wire 1 6$ wd3 [13] $end
$var wire 1 7$ wd3 [12] $end
$var wire 1 8$ wd3 [11] $end
$var wire 1 9$ wd3 [10] $end
$var wire 1 :$ wd3 [9] $end
$var wire 1 ;$ wd3 [8] $end
$var wire 1 <$ wd3 [7] $end
$var wire 1 =$ wd3 [6] $end
$var wire 1 >$ wd3 [5] $end
$var wire 1 ?$ wd3 [4] $end
$var wire 1 @$ wd3 [3] $end
$var wire 1 A$ wd3 [2] $end
$var wire 1 B$ wd3 [1] $end
$var wire 1 C$ wd3 [0] $end
$var reg 32 D$ rd1 [31:0] $end
$var reg 32 E$ rd2 [31:0] $end
$upscope $end

$scope module ext $end
$var wire 1 9 Instr [23] $end
$var wire 1 : Instr [22] $end
$var wire 1 ; Instr [21] $end
$var wire 1 < Instr [20] $end
$var wire 1 = Instr [19] $end
$var wire 1 > Instr [18] $end
$var wire 1 ? Instr [17] $end
$var wire 1 @ Instr [16] $end
$var wire 1 A Instr [15] $end
$var wire 1 B Instr [14] $end
$var wire 1 C Instr [13] $end
$var wire 1 D Instr [12] $end
$var wire 1 E Instr [11] $end
$var wire 1 F Instr [10] $end
$var wire 1 G Instr [9] $end
$var wire 1 H Instr [8] $end
$var wire 1 I Instr [7] $end
$var wire 1 J Instr [6] $end
$var wire 1 K Instr [5] $end
$var wire 1 L Instr [4] $end
$var wire 1 M Instr [3] $end
$var wire 1 N Instr [2] $end
$var wire 1 O Instr [1] $end
$var wire 1 P Instr [0] $end
$var wire 1 j ImmSrc [1] $end
$var wire 1 k ImmSrc [0] $end
$var reg 32 F$ ExtImm [31:0] $end
$upscope $end

$scope module srcamux $end
$var parameter 32 G$ WIDTH $end
$var wire 1 H$ d0 [31] $end
$var wire 1 I$ d0 [30] $end
$var wire 1 J$ d0 [29] $end
$var wire 1 K$ d0 [28] $end
$var wire 1 L$ d0 [27] $end
$var wire 1 M$ d0 [26] $end
$var wire 1 N$ d0 [25] $end
$var wire 1 O$ d0 [24] $end
$var wire 1 P$ d0 [23] $end
$var wire 1 Q$ d0 [22] $end
$var wire 1 R$ d0 [21] $end
$var wire 1 S$ d0 [20] $end
$var wire 1 T$ d0 [19] $end
$var wire 1 U$ d0 [18] $end
$var wire 1 V$ d0 [17] $end
$var wire 1 W$ d0 [16] $end
$var wire 1 X$ d0 [15] $end
$var wire 1 Y$ d0 [14] $end
$var wire 1 Z$ d0 [13] $end
$var wire 1 [$ d0 [12] $end
$var wire 1 \$ d0 [11] $end
$var wire 1 ]$ d0 [10] $end
$var wire 1 ^$ d0 [9] $end
$var wire 1 _$ d0 [8] $end
$var wire 1 `$ d0 [7] $end
$var wire 1 a$ d0 [6] $end
$var wire 1 b$ d0 [5] $end
$var wire 1 c$ d0 [4] $end
$var wire 1 d$ d0 [3] $end
$var wire 1 e$ d0 [2] $end
$var wire 1 f$ d0 [1] $end
$var wire 1 g$ d0 [0] $end
$var wire 1 h$ d1 [31] $end
$var wire 1 i$ d1 [30] $end
$var wire 1 j$ d1 [29] $end
$var wire 1 k$ d1 [28] $end
$var wire 1 l$ d1 [27] $end
$var wire 1 m$ d1 [26] $end
$var wire 1 n$ d1 [25] $end
$var wire 1 o$ d1 [24] $end
$var wire 1 p$ d1 [23] $end
$var wire 1 q$ d1 [22] $end
$var wire 1 r$ d1 [21] $end
$var wire 1 s$ d1 [20] $end
$var wire 1 t$ d1 [19] $end
$var wire 1 u$ d1 [18] $end
$var wire 1 v$ d1 [17] $end
$var wire 1 w$ d1 [16] $end
$var wire 1 x$ d1 [15] $end
$var wire 1 y$ d1 [14] $end
$var wire 1 z$ d1 [13] $end
$var wire 1 {$ d1 [12] $end
$var wire 1 |$ d1 [11] $end
$var wire 1 }$ d1 [10] $end
$var wire 1 ~$ d1 [9] $end
$var wire 1 !% d1 [8] $end
$var wire 1 "% d1 [7] $end
$var wire 1 #% d1 [6] $end
$var wire 1 $% d1 [5] $end
$var wire 1 %% d1 [4] $end
$var wire 1 &% d1 [3] $end
$var wire 1 '% d1 [2] $end
$var wire 1 (% d1 [1] $end
$var wire 1 )% d1 [0] $end
$var wire 1 s s $end
$var reg 32 *% y [31:0] $end
$upscope $end

$scope module srcbmux $end
$var parameter 32 +% WIDTH $end
$var wire 1 ,% d0 [31] $end
$var wire 1 -% d0 [30] $end
$var wire 1 .% d0 [29] $end
$var wire 1 /% d0 [28] $end
$var wire 1 0% d0 [27] $end
$var wire 1 1% d0 [26] $end
$var wire 1 2% d0 [25] $end
$var wire 1 3% d0 [24] $end
$var wire 1 4% d0 [23] $end
$var wire 1 5% d0 [22] $end
$var wire 1 6% d0 [21] $end
$var wire 1 7% d0 [20] $end
$var wire 1 8% d0 [19] $end
$var wire 1 9% d0 [18] $end
$var wire 1 :% d0 [17] $end
$var wire 1 ;% d0 [16] $end
$var wire 1 <% d0 [15] $end
$var wire 1 =% d0 [14] $end
$var wire 1 >% d0 [13] $end
$var wire 1 ?% d0 [12] $end
$var wire 1 @% d0 [11] $end
$var wire 1 A% d0 [10] $end
$var wire 1 B% d0 [9] $end
$var wire 1 C% d0 [8] $end
$var wire 1 D% d0 [7] $end
$var wire 1 E% d0 [6] $end
$var wire 1 F% d0 [5] $end
$var wire 1 G% d0 [4] $end
$var wire 1 H% d0 [3] $end
$var wire 1 I% d0 [2] $end
$var wire 1 J% d0 [1] $end
$var wire 1 K% d0 [0] $end
$var wire 1 L% d1 [31] $end
$var wire 1 M% d1 [30] $end
$var wire 1 N% d1 [29] $end
$var wire 1 O% d1 [28] $end
$var wire 1 P% d1 [27] $end
$var wire 1 Q% d1 [26] $end
$var wire 1 R% d1 [25] $end
$var wire 1 S% d1 [24] $end
$var wire 1 T% d1 [23] $end
$var wire 1 U% d1 [22] $end
$var wire 1 V% d1 [21] $end
$var wire 1 W% d1 [20] $end
$var wire 1 X% d1 [19] $end
$var wire 1 Y% d1 [18] $end
$var wire 1 Z% d1 [17] $end
$var wire 1 [% d1 [16] $end
$var wire 1 \% d1 [15] $end
$var wire 1 ]% d1 [14] $end
$var wire 1 ^% d1 [13] $end
$var wire 1 _% d1 [12] $end
$var wire 1 `% d1 [11] $end
$var wire 1 a% d1 [10] $end
$var wire 1 b% d1 [9] $end
$var wire 1 c% d1 [8] $end
$var wire 1 d% d1 [7] $end
$var wire 1 e% d1 [6] $end
$var wire 1 f% d1 [5] $end
$var wire 1 g% d1 [4] $end
$var wire 1 h% d1 [3] $end
$var wire 1 i% d1 [2] $end
$var wire 1 j% d1 [1] $end
$var wire 1 k% d1 [0] $end
$var wire 1 m s $end
$var reg 32 l% y [31:0] $end
$upscope $end

$scope module alu $end
$var wire 1 m% a [31] $end
$var wire 1 n% a [30] $end
$var wire 1 o% a [29] $end
$var wire 1 p% a [28] $end
$var wire 1 q% a [27] $end
$var wire 1 r% a [26] $end
$var wire 1 s% a [25] $end
$var wire 1 t% a [24] $end
$var wire 1 u% a [23] $end
$var wire 1 v% a [22] $end
$var wire 1 w% a [21] $end
$var wire 1 x% a [20] $end
$var wire 1 y% a [19] $end
$var wire 1 z% a [18] $end
$var wire 1 {% a [17] $end
$var wire 1 |% a [16] $end
$var wire 1 }% a [15] $end
$var wire 1 ~% a [14] $end
$var wire 1 !& a [13] $end
$var wire 1 "& a [12] $end
$var wire 1 #& a [11] $end
$var wire 1 $& a [10] $end
$var wire 1 %& a [9] $end
$var wire 1 && a [8] $end
$var wire 1 '& a [7] $end
$var wire 1 (& a [6] $end
$var wire 1 )& a [5] $end
$var wire 1 *& a [4] $end
$var wire 1 +& a [3] $end
$var wire 1 ,& a [2] $end
$var wire 1 -& a [1] $end
$var wire 1 .& a [0] $end
$var wire 1 /& b [31] $end
$var wire 1 0& b [30] $end
$var wire 1 1& b [29] $end
$var wire 1 2& b [28] $end
$var wire 1 3& b [27] $end
$var wire 1 4& b [26] $end
$var wire 1 5& b [25] $end
$var wire 1 6& b [24] $end
$var wire 1 7& b [23] $end
$var wire 1 8& b [22] $end
$var wire 1 9& b [21] $end
$var wire 1 :& b [20] $end
$var wire 1 ;& b [19] $end
$var wire 1 <& b [18] $end
$var wire 1 =& b [17] $end
$var wire 1 >& b [16] $end
$var wire 1 ?& b [15] $end
$var wire 1 @& b [14] $end
$var wire 1 A& b [13] $end
$var wire 1 B& b [12] $end
$var wire 1 C& b [11] $end
$var wire 1 D& b [10] $end
$var wire 1 E& b [9] $end
$var wire 1 F& b [8] $end
$var wire 1 G& b [7] $end
$var wire 1 H& b [6] $end
$var wire 1 I& b [5] $end
$var wire 1 J& b [4] $end
$var wire 1 K& b [3] $end
$var wire 1 L& b [2] $end
$var wire 1 M& b [1] $end
$var wire 1 N& b [0] $end
$var wire 1 n ALUControl [2] $end
$var wire 1 o ALUControl [1] $end
$var wire 1 p ALUControl [0] $end
$var reg 32 O& Result [31:0] $end
$var reg 4 P& ALUFlags [3:0] $end
$var reg 32 Q& alu_result_unsigned [31:0] $end
$var reg 1 R& N $end
$var reg 1 S& Z $end
$var reg 1 T& C $end
$var reg 1 U& V $end
$upscope $end

$scope module resmux $end
$var parameter 32 V& WIDTH $end
$var wire 1 W& d0 [31] $end
$var wire 1 X& d0 [30] $end
$var wire 1 Y& d0 [29] $end
$var wire 1 Z& d0 [28] $end
$var wire 1 [& d0 [27] $end
$var wire 1 \& d0 [26] $end
$var wire 1 ]& d0 [25] $end
$var wire 1 ^& d0 [24] $end
$var wire 1 _& d0 [23] $end
$var wire 1 `& d0 [22] $end
$var wire 1 a& d0 [21] $end
$var wire 1 b& d0 [20] $end
$var wire 1 c& d0 [19] $end
$var wire 1 d& d0 [18] $end
$var wire 1 e& d0 [17] $end
$var wire 1 f& d0 [16] $end
$var wire 1 g& d0 [15] $end
$var wire 1 h& d0 [14] $end
$var wire 1 i& d0 [13] $end
$var wire 1 j& d0 [12] $end
$var wire 1 k& d0 [11] $end
$var wire 1 l& d0 [10] $end
$var wire 1 m& d0 [9] $end
$var wire 1 n& d0 [8] $end
$var wire 1 o& d0 [7] $end
$var wire 1 p& d0 [6] $end
$var wire 1 q& d0 [5] $end
$var wire 1 r& d0 [4] $end
$var wire 1 s& d0 [3] $end
$var wire 1 t& d0 [2] $end
$var wire 1 u& d0 [1] $end
$var wire 1 v& d0 [0] $end
$var wire 1 x d1 [31] $end
$var wire 1 y d1 [30] $end
$var wire 1 z d1 [29] $end
$var wire 1 { d1 [28] $end
$var wire 1 | d1 [27] $end
$var wire 1 } d1 [26] $end
$var wire 1 ~ d1 [25] $end
$var wire 1 !! d1 [24] $end
$var wire 1 "! d1 [23] $end
$var wire 1 #! d1 [22] $end
$var wire 1 $! d1 [21] $end
$var wire 1 %! d1 [20] $end
$var wire 1 &! d1 [19] $end
$var wire 1 '! d1 [18] $end
$var wire 1 (! d1 [17] $end
$var wire 1 )! d1 [16] $end
$var wire 1 *! d1 [15] $end
$var wire 1 +! d1 [14] $end
$var wire 1 ,! d1 [13] $end
$var wire 1 -! d1 [12] $end
$var wire 1 .! d1 [11] $end
$var wire 1 /! d1 [10] $end
$var wire 1 0! d1 [9] $end
$var wire 1 1! d1 [8] $end
$var wire 1 2! d1 [7] $end
$var wire 1 3! d1 [6] $end
$var wire 1 4! d1 [5] $end
$var wire 1 5! d1 [4] $end
$var wire 1 6! d1 [3] $end
$var wire 1 7! d1 [2] $end
$var wire 1 8! d1 [1] $end
$var wire 1 9! d1 [0] $end
$var wire 1 q s $end
$var reg 32 w& y [31:0] $end
$upscope $end
$upscope $end

$scope module decode_unit $end
$var wire 1 1 FullInstr [31] $end
$var wire 1 2 FullInstr [30] $end
$var wire 1 3 FullInstr [29] $end
$var wire 1 4 FullInstr [28] $end
$var wire 1 5 FullInstr [27] $end
$var wire 1 6 FullInstr [26] $end
$var wire 1 7 FullInstr [25] $end
$var wire 1 8 FullInstr [24] $end
$var wire 1 9 FullInstr [23] $end
$var wire 1 : FullInstr [22] $end
$var wire 1 ; FullInstr [21] $end
$var wire 1 < FullInstr [20] $end
$var wire 1 = FullInstr [19] $end
$var wire 1 > FullInstr [18] $end
$var wire 1 ? FullInstr [17] $end
$var wire 1 @ FullInstr [16] $end
$var wire 1 A FullInstr [15] $end
$var wire 1 B FullInstr [14] $end
$var wire 1 C FullInstr [13] $end
$var wire 1 D FullInstr [12] $end
$var wire 1 E FullInstr [11] $end
$var wire 1 F FullInstr [10] $end
$var wire 1 G FullInstr [9] $end
$var wire 1 H FullInstr [8] $end
$var wire 1 I FullInstr [7] $end
$var wire 1 J FullInstr [6] $end
$var wire 1 K FullInstr [5] $end
$var wire 1 L FullInstr [4] $end
$var wire 1 M FullInstr [3] $end
$var wire 1 N FullInstr [2] $end
$var wire 1 O FullInstr [1] $end
$var wire 1 P FullInstr [0] $end
$var reg 2 x& RegSrc [1:0] $end
$var reg 2 y& ImmSrc [1:0] $end
$var reg 1 z& MemtoReg $end
$var reg 1 {& ALUSrc $end
$var reg 1 |& RegWrite $end
$var reg 1 }& MemWrite $end
$var reg 3 ~& ALUControl [2:0] $end
$var reg 2 !' FlagW [1:0] $end
$var reg 1 "' PCS $end
$var reg 1 #' PCS_ALU_SrcA $end
$var reg 2 $' Op [1:0] $end
$var reg 6 %' Funct [5:0] $end
$var reg 4 &' Rd [3:0] $end
$upscope $end

$scope module control_unit $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 1 Cond [3] $end
$var wire 1 2 Cond [2] $end
$var wire 1 3 Cond [1] $end
$var wire 1 4 Cond [0] $end
$var wire 1 '' ALUFlags [3] $end
$var wire 1 (' ALUFlags [2] $end
$var wire 1 )' ALUFlags [1] $end
$var wire 1 *' ALUFlags [0] $end
$var wire 1 +' FlagW [1] $end
$var wire 1 ,' FlagW [0] $end
$var wire 1 -' PCS_from_decoder $end
$var wire 1 .' RegW_from_decoder $end
$var wire 1 /' MemW_from_decoder $end
$var reg 1 0' PCSrc $end
$var reg 1 1' RegWrite $end
$var reg 1 2' MemWrite $end
$var reg 1 3' Stall $end
$var reg 4 4' Flags [3:0] $end
$var reg 1 5' condex $end
$var reg 1 6' cond_check_result $end
$var integer 32 7' cycle_count $end

$scope module flag_reg $end
$var parameter 32 8' WIDTH $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 ,' en $end
$var wire 1 '' d [3] $end
$var wire 1 (' d [2] $end
$var wire 1 )' d [1] $end
$var wire 1 *' d [0] $end
$var reg 4 9' q [3:0] $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_rom $end
$var wire 1 :' address [7] $end
$var wire 1 ;' address [6] $end
$var wire 1 <' address [5] $end
$var wire 1 =' address [4] $end
$var wire 1 >' address [3] $end
$var wire 1 ?' address [2] $end
$var wire 1 @' address [1] $end
$var wire 1 A' address [0] $end
$var tri1 1 ( clock $end
$var wire 1 B' q [31] $end
$var wire 1 C' q [30] $end
$var wire 1 D' q [29] $end
$var wire 1 E' q [28] $end
$var wire 1 F' q [27] $end
$var wire 1 G' q [26] $end
$var wire 1 H' q [25] $end
$var wire 1 I' q [24] $end
$var wire 1 J' q [23] $end
$var wire 1 K' q [22] $end
$var wire 1 L' q [21] $end
$var wire 1 M' q [20] $end
$var wire 1 N' q [19] $end
$var wire 1 O' q [18] $end
$var wire 1 P' q [17] $end
$var wire 1 Q' q [16] $end
$var wire 1 R' q [15] $end
$var wire 1 S' q [14] $end
$var wire 1 T' q [13] $end
$var wire 1 U' q [12] $end
$var wire 1 V' q [11] $end
$var wire 1 W' q [10] $end
$var wire 1 X' q [9] $end
$var wire 1 Y' q [8] $end
$var wire 1 Z' q [7] $end
$var wire 1 [' q [6] $end
$var wire 1 \' q [5] $end
$var wire 1 ]' q [4] $end
$var wire 1 ^' q [3] $end
$var wire 1 _' q [2] $end
$var wire 1 `' q [1] $end
$var wire 1 a' q [0] $end
$var wire 1 b' sub_wire0 [31] $end
$var wire 1 c' sub_wire0 [30] $end
$var wire 1 d' sub_wire0 [29] $end
$var wire 1 e' sub_wire0 [28] $end
$var wire 1 f' sub_wire0 [27] $end
$var wire 1 g' sub_wire0 [26] $end
$var wire 1 h' sub_wire0 [25] $end
$var wire 1 i' sub_wire0 [24] $end
$var wire 1 j' sub_wire0 [23] $end
$var wire 1 k' sub_wire0 [22] $end
$var wire 1 l' sub_wire0 [21] $end
$var wire 1 m' sub_wire0 [20] $end
$var wire 1 n' sub_wire0 [19] $end
$var wire 1 o' sub_wire0 [18] $end
$var wire 1 p' sub_wire0 [17] $end
$var wire 1 q' sub_wire0 [16] $end
$var wire 1 r' sub_wire0 [15] $end
$var wire 1 s' sub_wire0 [14] $end
$var wire 1 t' sub_wire0 [13] $end
$var wire 1 u' sub_wire0 [12] $end
$var wire 1 v' sub_wire0 [11] $end
$var wire 1 w' sub_wire0 [10] $end
$var wire 1 x' sub_wire0 [9] $end
$var wire 1 y' sub_wire0 [8] $end
$var wire 1 z' sub_wire0 [7] $end
$var wire 1 {' sub_wire0 [6] $end
$var wire 1 |' sub_wire0 [5] $end
$var wire 1 }' sub_wire0 [4] $end
$var wire 1 ~' sub_wire0 [3] $end
$var wire 1 !( sub_wire0 [2] $end
$var wire 1 "( sub_wire0 [1] $end
$var wire 1 #( sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 $( width_a $end
$var parameter 32 %( widthad_a $end
$var parameter 32 &( numwords_a $end
$var parameter 48 '( outdata_reg_a $end
$var parameter 32 (( address_aclr_a $end
$var parameter 32 )( outdata_aclr_a $end
$var parameter 32 *( indata_aclr_a $end
$var parameter 32 +( wrcontrol_aclr_a $end
$var parameter 32 ,( byteena_aclr_a $end
$var parameter 32 -( width_byteena_a $end
$var parameter 32 .( width_b $end
$var parameter 32 /( widthad_b $end
$var parameter 32 0( numwords_b $end
$var parameter 48 1( rdcontrol_reg_b $end
$var parameter 48 2( address_reg_b $end
$var parameter 96 3( outdata_reg_b $end
$var parameter 32 4( outdata_aclr_b $end
$var parameter 32 5( rdcontrol_aclr_b $end
$var parameter 48 6( indata_reg_b $end
$var parameter 48 7( wrcontrol_wraddress_reg_b $end
$var parameter 48 8( byteena_reg_b $end
$var parameter 32 9( indata_aclr_b $end
$var parameter 32 :( wrcontrol_aclr_b $end
$var parameter 32 ;( address_aclr_b $end
$var parameter 32 <( byteena_aclr_b $end
$var parameter 32 =( width_byteena_b $end
$var parameter 48 >( clock_enable_input_a $end
$var parameter 48 ?( clock_enable_output_a $end
$var parameter 48 @( clock_enable_input_b $end
$var parameter 48 A( clock_enable_output_b $end
$var parameter 120 B( clock_enable_core_a $end
$var parameter 120 C( clock_enable_core_b $end
$var parameter 160 D( read_during_write_mode_port_a $end
$var parameter 160 E( read_during_write_mode_port_b $end
$var parameter 40 F( enable_ecc $end
$var parameter 32 G( width_eccstatus $end
$var parameter 40 H( ecc_pipeline_stage_enabled $end
$var parameter 24 I( operation_mode $end
$var parameter 32 J( byte_size $end
$var parameter 72 K( read_during_write_mode_mixed_ports $end
$var parameter 32 L( ram_block_type $end
$var parameter 96 M( init_file $end
$var parameter 48 N( init_file_layout $end
$var parameter 32 O( maximum_depth $end
$var parameter 72 P( intended_device_family $end
$var parameter 168 Q( lpm_hint $end
$var parameter 80 R( lpm_type $end
$var parameter 24 S( implement_in_les $end
$var parameter 40 T( power_up_uninitialized $end
$var parameter 32 U( family_arria10 $end
$var tri0 1 V( wren_a $end
$var tri0 1 W( wren_b $end
$var tri1 1 X( rden_a $end
$var tri1 1 Y( rden_b $end
$var wire 1 Z( data_a [31] $end
$var wire 1 [( data_a [30] $end
$var wire 1 \( data_a [29] $end
$var wire 1 ]( data_a [28] $end
$var wire 1 ^( data_a [27] $end
$var wire 1 _( data_a [26] $end
$var wire 1 `( data_a [25] $end
$var wire 1 a( data_a [24] $end
$var wire 1 b( data_a [23] $end
$var wire 1 c( data_a [22] $end
$var wire 1 d( data_a [21] $end
$var wire 1 e( data_a [20] $end
$var wire 1 f( data_a [19] $end
$var wire 1 g( data_a [18] $end
$var wire 1 h( data_a [17] $end
$var wire 1 i( data_a [16] $end
$var wire 1 j( data_a [15] $end
$var wire 1 k( data_a [14] $end
$var wire 1 l( data_a [13] $end
$var wire 1 m( data_a [12] $end
$var wire 1 n( data_a [11] $end
$var wire 1 o( data_a [10] $end
$var wire 1 p( data_a [9] $end
$var wire 1 q( data_a [8] $end
$var wire 1 r( data_a [7] $end
$var wire 1 s( data_a [6] $end
$var wire 1 t( data_a [5] $end
$var wire 1 u( data_a [4] $end
$var wire 1 v( data_a [3] $end
$var wire 1 w( data_a [2] $end
$var wire 1 x( data_a [1] $end
$var wire 1 y( data_a [0] $end
$var wire 1 z( data_b [0] $end
$var wire 1 :' address_a [7] $end
$var wire 1 ;' address_a [6] $end
$var wire 1 <' address_a [5] $end
$var wire 1 =' address_a [4] $end
$var wire 1 >' address_a [3] $end
$var wire 1 ?' address_a [2] $end
$var wire 1 @' address_a [1] $end
$var wire 1 A' address_a [0] $end
$var wire 1 {( address_b [0] $end
$var tri1 1 ( clock0 $end
$var wire 1 |( clock1 $end
$var tri1 1 }( clocken0 $end
$var tri1 1 ~( clocken1 $end
$var tri1 1 !) clocken2 $end
$var tri1 1 ") clocken3 $end
$var tri0 1 #) aclr0 $end
$var tri0 1 $) aclr1 $end
$var tri1 1 %) byteena_a [0] $end
$var tri1 1 &) byteena_b [0] $end
$var tri0 1 ') addressstall_a $end
$var tri0 1 () addressstall_b $end
$var wire 1 b' q_a [31] $end
$var wire 1 c' q_a [30] $end
$var wire 1 d' q_a [29] $end
$var wire 1 e' q_a [28] $end
$var wire 1 f' q_a [27] $end
$var wire 1 g' q_a [26] $end
$var wire 1 h' q_a [25] $end
$var wire 1 i' q_a [24] $end
$var wire 1 j' q_a [23] $end
$var wire 1 k' q_a [22] $end
$var wire 1 l' q_a [21] $end
$var wire 1 m' q_a [20] $end
$var wire 1 n' q_a [19] $end
$var wire 1 o' q_a [18] $end
$var wire 1 p' q_a [17] $end
$var wire 1 q' q_a [16] $end
$var wire 1 r' q_a [15] $end
$var wire 1 s' q_a [14] $end
$var wire 1 t' q_a [13] $end
$var wire 1 u' q_a [12] $end
$var wire 1 v' q_a [11] $end
$var wire 1 w' q_a [10] $end
$var wire 1 x' q_a [9] $end
$var wire 1 y' q_a [8] $end
$var wire 1 z' q_a [7] $end
$var wire 1 {' q_a [6] $end
$var wire 1 |' q_a [5] $end
$var wire 1 }' q_a [4] $end
$var wire 1 ~' q_a [3] $end
$var wire 1 !( q_a [2] $end
$var wire 1 "( q_a [1] $end
$var wire 1 #( q_a [0] $end
$var wire 1 )) q_b [0] $end
$var wire 1 *) eccstatus [2] $end
$var wire 1 +) eccstatus [1] $end
$var wire 1 ,) eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 -) width_a $end
$var parameter 32 .) widthad_a $end
$var parameter 32 /) numwords_a $end
$var parameter 48 0) outdata_reg_a $end
$var parameter 32 1) address_aclr_a $end
$var parameter 32 2) outdata_aclr_a $end
$var parameter 32 3) indata_aclr_a $end
$var parameter 32 4) wrcontrol_aclr_a $end
$var parameter 32 5) byteena_aclr_a $end
$var parameter 32 6) width_byteena_a $end
$var parameter 32 7) width_b $end
$var parameter 32 8) widthad_b $end
$var parameter 32 9) numwords_b $end
$var parameter 48 :) rdcontrol_reg_b $end
$var parameter 48 ;) address_reg_b $end
$var parameter 96 <) outdata_reg_b $end
$var parameter 32 =) outdata_aclr_b $end
$var parameter 32 >) rdcontrol_aclr_b $end
$var parameter 48 ?) indata_reg_b $end
$var parameter 48 @) wrcontrol_wraddress_reg_b $end
$var parameter 48 A) byteena_reg_b $end
$var parameter 32 B) indata_aclr_b $end
$var parameter 32 C) wrcontrol_aclr_b $end
$var parameter 32 D) address_aclr_b $end
$var parameter 32 E) byteena_aclr_b $end
$var parameter 32 F) width_byteena_b $end
$var parameter 48 G) clock_enable_input_a $end
$var parameter 48 H) clock_enable_output_a $end
$var parameter 48 I) clock_enable_input_b $end
$var parameter 48 J) clock_enable_output_b $end
$var parameter 120 K) clock_enable_core_a $end
$var parameter 120 L) clock_enable_core_b $end
$var parameter 160 M) read_during_write_mode_port_a $end
$var parameter 160 N) read_during_write_mode_port_b $end
$var parameter 40 O) enable_ecc $end
$var parameter 32 P) width_eccstatus $end
$var parameter 40 Q) ecc_pipeline_stage_enabled $end
$var parameter 24 R) operation_mode $end
$var parameter 32 S) byte_size $end
$var parameter 72 T) read_during_write_mode_mixed_ports $end
$var parameter 32 U) ram_block_type $end
$var parameter 96 V) init_file $end
$var parameter 48 W) init_file_layout $end
$var parameter 32 X) maximum_depth $end
$var parameter 72 Y) intended_device_family $end
$var parameter 168 Z) lpm_hint $end
$var parameter 80 [) lpm_type $end
$var parameter 24 \) implement_in_les $end
$var parameter 40 ]) power_up_uninitialized $end
$var parameter 24 ^) sim_show_memory_data_in_port_b_layout $end
$var parameter 32 _) is_lutram $end
$var parameter 32 `) is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 a) is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 b) check_simultaneous_read_write $end
$var parameter 32 c) dual_port_addreg_b_clk0 $end
$var parameter 32 d) dual_port_addreg_b_clk1 $end
$var parameter 32 e) i_byte_size_tmp $end
$var parameter 32 f) i_lutram_read $end
$var parameter 32 g) enable_mem_data_b_reading $end
$var parameter 32 h) family_arriav $end
$var parameter 32 i) family_cyclonev $end
$var parameter 32 j) family_base_arriav $end
$var parameter 32 k) family_arria10 $end
$var parameter 32 l) family_stratix10 $end
$var parameter 32 m) family_arriavi $end
$var parameter 32 n) family_nightfury $end
$var parameter 32 o) family_arriavgz $end
$var parameter 32 p) family_stratixv $end
$var parameter 32 q) family_hardcopyiv $end
$var parameter 32 r) family_hardcopyiii $end
$var parameter 32 s) family_hardcopyii $end
$var parameter 32 t) family_arriaiigz $end
$var parameter 32 u) family_arriaiigx $end
$var parameter 32 v) family_stratixiii $end
$var parameter 32 w) family_zippleback $end
$var parameter 32 x) family_cycloneiii $end
$var parameter 32 y) family_cyclone $end
$var parameter 32 z) family_base_cycloneii $end
$var parameter 32 {) family_cycloneii $end
$var parameter 32 |) family_base_stratix $end
$var parameter 32 }) family_base_stratixii $end
$var parameter 32 ~) family_has_lutram $end
$var parameter 32 !* family_has_stratixv_style_ram $end
$var parameter 32 "* family_has_stratixiii_style_ram $end
$var parameter 32 #* family_has_m512 $end
$var parameter 32 $* family_has_megaram $end
$var parameter 32 %* family_has_stratixi_style_ram $end
$var parameter 32 &* is_write_on_positive_edge $end
$var parameter 32 '* lutram_single_port_fast_read $end
$var parameter 32 (* lutram_dual_port_fast_read $end
$var parameter 32 )* s3_address_aclr_a $end
$var parameter 32 ** s3_address_aclr_b $end
$var parameter 32 +* i_address_aclr_family_a $end
$var parameter 32 ,* i_address_aclr_family_b $end
$var tri0 1 V( wren_a $end
$var tri0 1 W( wren_b $end
$var tri1 1 X( rden_a $end
$var tri1 1 Y( rden_b $end
$var wire 1 Z( data_a [31] $end
$var wire 1 [( data_a [30] $end
$var wire 1 \( data_a [29] $end
$var wire 1 ]( data_a [28] $end
$var wire 1 ^( data_a [27] $end
$var wire 1 _( data_a [26] $end
$var wire 1 `( data_a [25] $end
$var wire 1 a( data_a [24] $end
$var wire 1 b( data_a [23] $end
$var wire 1 c( data_a [22] $end
$var wire 1 d( data_a [21] $end
$var wire 1 e( data_a [20] $end
$var wire 1 f( data_a [19] $end
$var wire 1 g( data_a [18] $end
$var wire 1 h( data_a [17] $end
$var wire 1 i( data_a [16] $end
$var wire 1 j( data_a [15] $end
$var wire 1 k( data_a [14] $end
$var wire 1 l( data_a [13] $end
$var wire 1 m( data_a [12] $end
$var wire 1 n( data_a [11] $end
$var wire 1 o( data_a [10] $end
$var wire 1 p( data_a [9] $end
$var wire 1 q( data_a [8] $end
$var wire 1 r( data_a [7] $end
$var wire 1 s( data_a [6] $end
$var wire 1 t( data_a [5] $end
$var wire 1 u( data_a [4] $end
$var wire 1 v( data_a [3] $end
$var wire 1 w( data_a [2] $end
$var wire 1 x( data_a [1] $end
$var wire 1 y( data_a [0] $end
$var wire 1 z( data_b [0] $end
$var wire 1 :' address_a [7] $end
$var wire 1 ;' address_a [6] $end
$var wire 1 <' address_a [5] $end
$var wire 1 =' address_a [4] $end
$var wire 1 >' address_a [3] $end
$var wire 1 ?' address_a [2] $end
$var wire 1 @' address_a [1] $end
$var wire 1 A' address_a [0] $end
$var wire 1 {( address_b [0] $end
$var tri1 1 ( clock0 $end
$var wire 1 |( clock1 $end
$var tri1 1 }( clocken0 $end
$var tri1 1 ~( clocken1 $end
$var tri1 1 !) clocken2 $end
$var tri1 1 ") clocken3 $end
$var tri0 1 #) aclr0 $end
$var tri0 1 $) aclr1 $end
$var wire 1 %) byteena_a [0] $end
$var wire 1 &) byteena_b [0] $end
$var tri0 1 ') addressstall_a $end
$var tri0 1 () addressstall_b $end
$var wire 1 b' q_a [31] $end
$var wire 1 c' q_a [30] $end
$var wire 1 d' q_a [29] $end
$var wire 1 e' q_a [28] $end
$var wire 1 f' q_a [27] $end
$var wire 1 g' q_a [26] $end
$var wire 1 h' q_a [25] $end
$var wire 1 i' q_a [24] $end
$var wire 1 j' q_a [23] $end
$var wire 1 k' q_a [22] $end
$var wire 1 l' q_a [21] $end
$var wire 1 m' q_a [20] $end
$var wire 1 n' q_a [19] $end
$var wire 1 o' q_a [18] $end
$var wire 1 p' q_a [17] $end
$var wire 1 q' q_a [16] $end
$var wire 1 r' q_a [15] $end
$var wire 1 s' q_a [14] $end
$var wire 1 t' q_a [13] $end
$var wire 1 u' q_a [12] $end
$var wire 1 v' q_a [11] $end
$var wire 1 w' q_a [10] $end
$var wire 1 x' q_a [9] $end
$var wire 1 y' q_a [8] $end
$var wire 1 z' q_a [7] $end
$var wire 1 {' q_a [6] $end
$var wire 1 |' q_a [5] $end
$var wire 1 }' q_a [4] $end
$var wire 1 ~' q_a [3] $end
$var wire 1 !( q_a [2] $end
$var wire 1 "( q_a [1] $end
$var wire 1 #( q_a [0] $end
$var wire 1 )) q_b [0] $end
$var wire 1 *) eccstatus [2] $end
$var wire 1 +) eccstatus [1] $end
$var wire 1 ,) eccstatus [0] $end
$var reg 32 -* i_data_reg_a [31:0] $end
$var reg 32 .* temp_wa [31:0] $end
$var reg 32 /* temp_wa2 [31:0] $end
$var reg 32 0* temp_wa2b [31:0] $end
$var reg 32 1* init_temp [31:0] $end
$var reg 1 2* i_data_reg_b [0:0] $end
$var reg 1 3* temp_wb [0:0] $end
$var reg 1 4* temp_wb2 [0:0] $end
$var reg 1 5* temp $end
$var reg 32 6* i_q_reg_a [31:0] $end
$var reg 32 7* i_q_tmp_a [31:0] $end
$var reg 32 8* i_q_tmp2_a [31:0] $end
$var reg 1 9* i_q_reg_b [0:0] $end
$var reg 1 :* i_q_tmp_b [0:0] $end
$var reg 1 ;* i_q_tmp2_b [0:0] $end
$var reg 1 <* i_q_output_latch [0:0] $end
$var reg 32 =* i_byteena_mask_reg_a [31:0] $end
$var reg 1 >* i_byteena_mask_reg_b [0:0] $end
$var reg 8 ?* i_address_reg_a [7:0] $end
$var reg 1 @* i_address_reg_b [0:0] $end
$var reg 1 A* i_q_ecc_reg_b [0:0] $end
$var reg 1 B* i_q_ecc_tmp_b [0:0] $end
$var reg 8 C* i_original_address_a [7:0] $end
$var reg 32 D* i_byteena_mask_reg_a_tmp [31:0] $end
$var reg 1 E* i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 32 F* i_byteena_mask_reg_a_out [31:0] $end
$var reg 1 G* i_byteena_mask_reg_b_out [0:0] $end
$var reg 32 H* i_byteena_mask_reg_a_x [31:0] $end
$var reg 1 I* i_byteena_mask_reg_b_x [0:0] $end
$var reg 32 J* i_byteena_mask_reg_a_out_b [31:0] $end
$var reg 1 K* i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 L* ram_initf [2048:1] $end
$var reg 1 M* i_wren_reg_a $end
$var reg 1 N* i_wren_reg_b $end
$var reg 1 O* i_rden_reg_a $end
$var reg 1 P* i_rden_reg_b $end
$var reg 1 Q* i_read_flag_a $end
$var reg 1 R* i_read_flag_b $end
$var reg 1 S* i_write_flag_a $end
$var reg 1 T* i_write_flag_b $end
$var reg 1 U* good_to_go_a $end
$var reg 1 V* good_to_go_b $end
$var reg 32 W* file_desc [31:0] $end
$var reg 1 X* init_file_b_port $end
$var reg 1 Y* i_nmram_write_a $end
$var reg 1 Z* i_nmram_write_b $end
$var reg 32 [* wa_mult_x [31:0] $end
$var reg 32 \* wa_mult_x_ii [31:0] $end
$var reg 32 ]* wa_mult_x_iii [31:0] $end
$var reg 40 ^* add_reg_a_mult_wa [39:0] $end
$var reg 2 _* add_reg_b_mult_wb [1:0] $end
$var reg 40 `* add_reg_a_mult_wa_pl_wa [39:0] $end
$var reg 2 a* add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 b* same_clock_pulse0 $end
$var reg 1 c* same_clock_pulse1 $end
$var reg 1 d* i_original_data_b [0:0] $end
$var reg 32 e* i_original_data_a [31:0] $end
$var reg 1 f* i_address_aclr_a_flag $end
$var reg 1 g* i_address_aclr_a_prev $end
$var reg 1 h* i_address_aclr_b_flag $end
$var reg 1 i* i_address_aclr_b_prev $end
$var reg 1 j* i_outdata_aclr_a_prev $end
$var reg 1 k* i_outdata_aclr_b_prev $end
$var reg 1 l* i_force_reread_a $end
$var reg 1 m* i_force_reread_a1 $end
$var reg 1 n* i_force_reread_b $end
$var reg 1 o* i_force_reread_b1 $end
$var reg 1 p* i_force_reread_a_signal $end
$var reg 1 q* i_force_reread_b_signal $end
$var reg 169 r* cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 s* i_ram_block_type [56:0] $end
$var integer 32 t* i_byte_size $end
$var wire 1 u* i_good_to_write_a $end
$var wire 1 v* i_good_to_write_b $end
$var reg 1 w* i_good_to_write_a2 $end
$var reg 1 x* i_good_to_write_b2 $end
$var reg 1 y* i_core_clocken_a_reg $end
$var reg 1 z* i_core_clocken0_b_reg $end
$var reg 1 {* i_core_clocken1_b_reg $end
$var wire 1 |* i_indata_aclr_a $end
$var wire 1 }* i_address_aclr_a $end
$var wire 1 ~* i_wrcontrol_aclr_a $end
$var wire 1 !+ i_indata_aclr_b $end
$var wire 1 "+ i_address_aclr_b $end
$var wire 1 #+ i_wrcontrol_aclr_b $end
$var wire 1 $+ i_outdata_aclr_a $end
$var wire 1 %+ i_outdata_aclr_b $end
$var wire 1 &+ i_rdcontrol_aclr_b $end
$var wire 1 '+ i_byteena_aclr_a $end
$var wire 1 (+ i_byteena_aclr_b $end
$var wire 1 )+ i_outdata_clken_a $end
$var wire 1 *+ i_outdata_clken_b $end
$var wire 1 ++ i_outlatch_clken_a $end
$var wire 1 ,+ i_outlatch_clken_b $end
$var wire 1 -+ i_clocken0 $end
$var wire 1 .+ i_clocken1_b $end
$var wire 1 /+ i_clocken0_b $end
$var wire 1 0+ i_core_clocken_a $end
$var wire 1 1+ i_core_clocken_b $end
$var wire 1 2+ i_core_clocken0_b $end
$var wire 1 3+ i_core_clocken1_b $end
$var tri1 1 4+ i_byteena_a [0] $end
$var tri1 1 5+ i_byteena_b [0] $end
$var integer 32 6+ i_numwords_a $end
$var integer 32 7+ i_numwords_b $end
$var integer 32 8+ i_aclr_flag_a $end
$var integer 32 9+ i_aclr_flag_b $end
$var integer 32 :+ i_q_tmp2_a_idx $end
$var integer 32 ;+ init_i $end
$var integer 32 <+ i $end
$var integer 32 =+ i2 $end
$var integer 32 >+ i3 $end
$var integer 32 ?+ i4 $end
$var integer 32 @+ i5 $end
$var integer 32 A+ j $end
$var integer 32 B+ j2 $end
$var integer 32 C+ j3 $end
$var integer 32 D+ k $end
$var integer 32 E+ k2 $end
$var integer 32 F+ k3 $end
$var integer 32 G+ k4 $end
$var integer 32 H+ i_div_wa $end
$var integer 32 I+ i_div_wb $end
$var integer 32 J+ j_plus_i2 $end
$var integer 32 K+ j2_plus_i5 $end
$var integer 32 L+ j3_plus_i5 $end
$var integer 32 M+ j_plus_i2_div_a $end
$var integer 32 N+ j2_plus_i5_div_a $end
$var integer 32 O+ j3_plus_i5_div_a $end
$var integer 32 P+ j3_plus_i5_div_b $end
$var integer 32 Q+ i_byteena_count $end
$var integer 32 R+ port_a_bit_count_low $end
$var integer 32 S+ port_a_bit_count_high $end
$var integer 32 T+ port_b_bit_count_low $end
$var integer 32 U+ port_b_bit_count_high $end
$var time 64 V+ i_data_write_time_a $end
$var time 64 W+ i_data_write_time_b $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 X+ IS_FAMILY_ARRIA10 $end
$var reg 160 Y+ device [160:1] $end
$var reg 1 Z+ is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 [+ IS_FAMILY_ARRIAGX $end
$var reg 160 \+ device [160:1] $end
$var reg 1 ]+ is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 ^+ IS_FAMILY_ARRIAIIGX $end
$var reg 160 _+ device [160:1] $end
$var reg 1 `+ is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 a+ IS_FAMILY_ARRIAIIGZ $end
$var reg 160 b+ device [160:1] $end
$var reg 1 c+ is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 d+ IS_FAMILY_ARRIAVGZ $end
$var reg 160 e+ device [160:1] $end
$var reg 1 f+ is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 g+ IS_FAMILY_ARRIAV $end
$var reg 160 h+ device [160:1] $end
$var reg 1 i+ is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 j+ IS_FAMILY_CYCLONE10LP $end
$var reg 160 k+ device [160:1] $end
$var reg 1 l+ is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 m+ IS_FAMILY_CYCLONEII $end
$var reg 160 n+ device [160:1] $end
$var reg 1 o+ is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 p+ IS_FAMILY_CYCLONEIIILS $end
$var reg 160 q+ device [160:1] $end
$var reg 1 r+ is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 s+ IS_FAMILY_CYCLONEIII $end
$var reg 160 t+ device [160:1] $end
$var reg 1 u+ is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 v+ IS_FAMILY_CYCLONEIVE $end
$var reg 160 w+ device [160:1] $end
$var reg 1 x+ is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 y+ IS_FAMILY_CYCLONEIVGX $end
$var reg 160 z+ device [160:1] $end
$var reg 1 {+ is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 |+ IS_FAMILY_CYCLONEV $end
$var reg 160 }+ device [160:1] $end
$var reg 1 ~+ is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 !, IS_FAMILY_CYCLONE $end
$var reg 160 ", device [160:1] $end
$var reg 1 #, is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 $, IS_FAMILY_HARDCOPYII $end
$var reg 160 %, device [160:1] $end
$var reg 1 &, is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 ', IS_FAMILY_HARDCOPYIII $end
$var reg 160 (, device [160:1] $end
$var reg 1 ), is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 *, IS_FAMILY_HARDCOPYIV $end
$var reg 160 +, device [160:1] $end
$var reg 1 ,, is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 -, IS_FAMILY_MAX10 $end
$var reg 160 ., device [160:1] $end
$var reg 1 /, is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 0, IS_FAMILY_MAXII $end
$var reg 160 1, device [160:1] $end
$var reg 1 2, is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 3, IS_FAMILY_MAXV $end
$var reg 160 4, device [160:1] $end
$var reg 1 5, is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 6, IS_FAMILY_STRATIX10 $end
$var reg 160 7, device [160:1] $end
$var reg 1 8, is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 9, IS_FAMILY_STRATIXGX $end
$var reg 160 :, device [160:1] $end
$var reg 1 ;, is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 <, IS_FAMILY_STRATIXIIGX $end
$var reg 160 =, device [160:1] $end
$var reg 1 >, is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 ?, IS_FAMILY_STRATIXII $end
$var reg 160 @, device [160:1] $end
$var reg 1 A, is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 B, IS_FAMILY_STRATIXIII $end
$var reg 160 C, device [160:1] $end
$var reg 1 D, is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 E, IS_FAMILY_STRATIXIV $end
$var reg 160 F, device [160:1] $end
$var reg 1 G, is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 H, IS_FAMILY_STRATIXV $end
$var reg 160 I, device [160:1] $end
$var reg 1 J, is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 K, IS_FAMILY_STRATIX $end
$var reg 160 L, device [160:1] $end
$var reg 1 M, is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 N, FEATURE_FAMILY_STRATIXGX $end
$var reg 160 O, device [160:1] $end
$var reg 1 P, var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 Q, FEATURE_FAMILY_CYCLONE $end
$var reg 160 R, device [160:1] $end
$var reg 1 S, var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 T, FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 U, device [160:1] $end
$var reg 1 V, var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 W, FEATURE_FAMILY_STRATIXIII $end
$var reg 160 X, device [160:1] $end
$var reg 1 Y, var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 Z, FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 [, device [160:1] $end
$var reg 1 \, var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 ], FEATURE_FAMILY_STRATIXV $end
$var reg 160 ^, device [160:1] $end
$var reg 1 _, var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 `, FEATURE_FAMILY_ARRIA10 $end
$var reg 160 a, device [160:1] $end
$var reg 1 b, var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 c, FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 d, device [160:1] $end
$var reg 1 e, var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 f, FEATURE_FAMILY_STRATIXII $end
$var reg 160 g, device [160:1] $end
$var reg 1 h, var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 i, FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 j, device [160:1] $end
$var reg 1 k, var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 l, FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 m, device [160:1] $end
$var reg 1 n, var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 o, FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 p, device [160:1] $end
$var reg 1 q, var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 r, FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 s, device [160:1] $end
$var reg 1 t, var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 u, FEATURE_FAMILY_STRATIX $end
$var reg 160 v, device [160:1] $end
$var reg 1 w, var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 x, FEATURE_FAMILY_MAXII $end
$var reg 160 y, device [160:1] $end
$var reg 1 z, var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 {, FEATURE_FAMILY_MAXV $end
$var reg 160 |, device [160:1] $end
$var reg 1 }, var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 ~, FEATURE_FAMILY_CYCLONEII $end
$var reg 160 !- device [160:1] $end
$var reg 1 "- var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 #- FEATURE_FAMILY_STRATIXIV $end
$var reg 160 $- device [160:1] $end
$var reg 1 %- var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 &- FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 '- device [160:1] $end
$var reg 1 (- var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 )- FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 *- device [160:1] $end
$var reg 1 +- var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 ,- FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 -- device [160:1] $end
$var reg 1 .- var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 /- FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 0- device [160:1] $end
$var reg 1 1- var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 2- FEATURE_FAMILY_CYCLONEV $end
$var reg 160 3- device [160:1] $end
$var reg 1 4- var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 5- FEATURE_FAMILY_ARRIAV $end
$var reg 160 6- device [160:1] $end
$var reg 1 7- var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 8- FEATURE_FAMILY_MAX10 $end
$var reg 160 9- device [160:1] $end
$var reg 1 :- var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 ;- FEATURE_FAMILY_STRATIX10 $end
$var reg 160 <- device [160:1] $end
$var reg 1 =- var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 >- FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 ?- device [160:1] $end
$var reg 1 @- var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 A- FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 B- device [160:1] $end
$var reg 1 C- var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 D- FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 E- device [160:1] $end
$var reg 1 F- var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 G- FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 H- device [160:1] $end
$var reg 1 I- var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 J- FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 K- device [160:1] $end
$var reg 1 L- var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 M- FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 N- device [160:1] $end
$var reg 1 O- var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 P- FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 Q- device [160:1] $end
$var reg 1 R- var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 S- FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 T- device [160:1] $end
$var reg 1 U- var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 V- FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 W- device [160:1] $end
$var reg 1 X- var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 Y- FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 Z- device [160:1] $end
$var reg 1 [- var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 \- FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 ]- device [160:1] $end
$var reg 1 ^- var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 _- IS_VALID_FAMILY $end
$var reg 160 `- device [160:1] $end
$var reg 1 a- is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 b- tolower [8:1] $end
$var reg 8 c- given_character [8:1] $end
$var reg 8 d- conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 e- ecc_parity [7:0] $end
$var reg 8 f- i_eccencparity [7:0] $end
$var integer 32 g- pointer $end
$var integer 32 h- pointer_max $end
$var integer 32 i- pointer_min $end
$var integer 32 j- flag_err $end
$var integer 32 k- flag $end
$var integer 32 l- flag_double $end
$var integer 32 m- flag_triple $end
$var integer 32 n- flag_single $end
$var integer 32 o- flag_no_err $end
$var integer 32 p- flag_uncorr $end
$var integer 32 q- n $end
$var integer 32 r- err $end
$var integer 32 s- found $end
$var integer 32 t- found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 u- in_file [2048:1] $end
$var integer 32 v- width $end
$var reg 2048 w- out_file [2048:1] $end
$var reg 2048 x- buffer [2048:1] $end
$var reg 1025 y- memory_data1 [1024:0] $end
$var reg 1025 z- memory_data2 [1024:0] $end
$var reg 8 {- c [8:1] $end
$var reg 4 |- hex [3:0] $end
$var reg 4 }- tmp_char [3:0] $end
$var reg 24 ~- address_radix [24:1] $end
$var reg 24 !. data_radix [24:1] $end
$var reg 1 ". get_width $end
$var reg 1 #. get_depth $end
$var reg 1 $. get_data_radix $end
$var reg 1 %. get_address_radix $end
$var reg 1 &. width_found $end
$var reg 1 '. depth_found $end
$var reg 1 (. data_radix_found $end
$var reg 1 ). address_radix_found $end
$var reg 1 *. get_address_data_pairs $end
$var reg 1 +. get_address $end
$var reg 1 ,. get_data $end
$var reg 1 -. display_address $end
$var reg 1 .. invalid_address $end
$var reg 1 /. get_start_address $end
$var reg 1 0. get_end_address $end
$var reg 1 1. done $end
$var reg 1 2. error_status $end
$var reg 1 3. first_rec $end
$var reg 1 4. last_rec $end
$var integer 32 5. memory_width $end
$var integer 32 6. memory_depth $end
$var integer 32 7. value $end
$var integer 32 8. ifp $end
$var integer 32 9. ofp $end
$var integer 32 :. r $end
$var integer 32 ;. r2 $end
$var integer 32 <. i $end
$var integer 32 =. j $end
$var integer 32 >. k $end
$var integer 32 ?. m $end
$var integer 32 @. n $end
$var integer 32 A. negative $end
$var integer 32 B. off_addr $end
$var integer 32 C. nn $end
$var integer 32 D. address $end
$var integer 32 E. tt $end
$var integer 32 F. cc $end
$var integer 32 G. aah $end
$var integer 32 H. aal $end
$var integer 32 I. dd $end
$var integer 32 J. sum $end
$var integer 32 K. start_address $end
$var integer 32 L. end_address $end
$var integer 32 M. line_no $end
$var integer 32 N. character_count $end
$var integer 32 O. comment_with_percent_found $end
$var integer 32 P. comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 Q. in_file [2048:1] $end
$var integer 32 R. width $end
$var reg 2048 S. out_file [2048:1] $end
$var reg 8 T. c [8:1] $end
$var reg 4 U. hex [3:0] $end
$var reg 4 V. tmp_char [3:0] $end
$var reg 1 W. done $end
$var reg 1 X. error_status $end
$var reg 1 Y. first_rec $end
$var reg 1 Z. last_rec $end
$var reg 1 [. first_normal_record $end
$var reg 1 \. is_word_address_format $end
$var integer 32 ]. ifp $end
$var integer 32 ^. ofp $end
$var integer 32 _. r $end
$var integer 32 `. r2 $end
$var integer 32 a. i $end
$var integer 32 b. j $end
$var integer 32 c. k $end
$var integer 32 d. m $end
$var integer 32 e. n $end
$var integer 32 f. off_addr $end
$var integer 32 g. nn $end
$var integer 32 h. aaaa $end
$var integer 32 i. aaaa_pre $end
$var integer 32 j. tt $end
$var integer 32 k. cc $end
$var integer 32 l. aah $end
$var integer 32 m. aal $end
$var integer 32 n. dd $end
$var integer 32 o. sum $end
$var integer 32 p. line_no $end
$var integer 32 q. divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 r. in_file [2048:1] $end
$var integer 32 s. width $end
$var reg 2048 t. out_file [2048:1] $end
$upscope $end
$upscope $end

$scope begin clk0_on_outa_gen $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module main_memory_map $end
$var wire 1 ( clk $end
$var wire 1 u. we $end
$var wire 1 v. a [31] $end
$var wire 1 w. a [30] $end
$var wire 1 x. a [29] $end
$var wire 1 y. a [28] $end
$var wire 1 z. a [27] $end
$var wire 1 {. a [26] $end
$var wire 1 |. a [25] $end
$var wire 1 }. a [24] $end
$var wire 1 ~. a [23] $end
$var wire 1 !/ a [22] $end
$var wire 1 "/ a [21] $end
$var wire 1 #/ a [20] $end
$var wire 1 $/ a [19] $end
$var wire 1 %/ a [18] $end
$var wire 1 &/ a [17] $end
$var wire 1 '/ a [16] $end
$var wire 1 (/ a [15] $end
$var wire 1 )/ a [14] $end
$var wire 1 */ a [13] $end
$var wire 1 +/ a [12] $end
$var wire 1 ,/ a [11] $end
$var wire 1 -/ a [10] $end
$var wire 1 ./ a [9] $end
$var wire 1 // a [8] $end
$var wire 1 0/ a [7] $end
$var wire 1 1/ a [6] $end
$var wire 1 2/ a [5] $end
$var wire 1 3/ a [4] $end
$var wire 1 4/ a [3] $end
$var wire 1 5/ a [2] $end
$var wire 1 6/ a [1] $end
$var wire 1 7/ a [0] $end
$var wire 1 8/ wd [31] $end
$var wire 1 9/ wd [30] $end
$var wire 1 :/ wd [29] $end
$var wire 1 ;/ wd [28] $end
$var wire 1 </ wd [27] $end
$var wire 1 =/ wd [26] $end
$var wire 1 >/ wd [25] $end
$var wire 1 ?/ wd [24] $end
$var wire 1 @/ wd [23] $end
$var wire 1 A/ wd [22] $end
$var wire 1 B/ wd [21] $end
$var wire 1 C/ wd [20] $end
$var wire 1 D/ wd [19] $end
$var wire 1 E/ wd [18] $end
$var wire 1 F/ wd [17] $end
$var wire 1 G/ wd [16] $end
$var wire 1 H/ wd [15] $end
$var wire 1 I/ wd [14] $end
$var wire 1 J/ wd [13] $end
$var wire 1 K/ wd [12] $end
$var wire 1 L/ wd [11] $end
$var wire 1 M/ wd [10] $end
$var wire 1 N/ wd [9] $end
$var wire 1 O/ wd [8] $end
$var wire 1 P/ wd [7] $end
$var wire 1 Q/ wd [6] $end
$var wire 1 R/ wd [5] $end
$var wire 1 S/ wd [4] $end
$var wire 1 T/ wd [3] $end
$var wire 1 U/ wd [2] $end
$var wire 1 V/ wd [1] $end
$var wire 1 W/ wd [0] $end
$var reg 32 X/ rd [31:0] $end
$var reg 16 Y/ paddle_x [15:0] $end
$var reg 16 Z/ ball_x [15:0] $end
$var reg 16 [/ ball_y [15:0] $end
$var reg 16 \/ ball_vx [15:0] $end
$var reg 16 ]/ ball_vy [15:0] $end
$var reg 16 ^/ score [15:0] $end
$var reg 8 _/ lives [7:0] $end
$var reg 32 `/ ps2_data [31:0] $end
$var reg 32 a/ vga_control [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
b0 #
b0 $
bx %
0&
b0 '
b0 *
b0 +
bx ,
0-
b0 .
b0 /
b0 0
bx Q
b0 R
bx S
0T
b0 U
b0 V
b1xx W
0X
0Y
0Z
0[
b0 \
b0 ]
b0 ^
0_
bx `
b0 a
1b
0c
0d
0e
0f
b1xx t
b0 u
b0 v
b0 w
b100 :!
b100 ;!
b1000 <!
b0 =!
b0 >!
b0 ?!
b0 @!
b0 A!
b0 B!
b0 C!
b0 f!
b100 J"
b1000 .#
b100 p#
b0 v#
b0 x#
b0 D$
b0 E$
b0 F$
b0 *%
b0 l%
b0 O&
b1xx P&
b0 Q&
0R&
1S&
xT&
xU&
b0 w&
b0 x&
b0 y&
0z&
0{&
1|&
0}&
b0 ~&
b0 !'
0"'
0#'
b0 $'
b0 %'
b0 &'
00'
01'
02'
03'
b0 4'
05'
06'
b0 9'
b0 -*
bx .*
bx /*
bx 0*
bx 1*
b0 2*
bx 3*
bx 4*
x5*
b0 6*
b0 7*
b0 8*
b0 9*
b0 :*
b0 ;*
bx <*
b0 =*
b0 >*
b0 ?*
b0 @*
bx A*
bx B*
b0 C*
bx D*
bx E*
b0 F*
b0 G*
b0 H*
b0 I*
bx J*
bx K*
b11100100110111101101101010111110110010001100001011101000110000100101110011101100110010101110010 L*
0M*
0N*
0O*
0P*
0Q*
0R*
0S*
0T*
0U*
0V*
bx W*
0X*
0Y*
0Z*
b0 [*
bx \*
bx ]*
bx ^*
bx _*
bx `*
bx a*
0b*
0c*
b0 d*
b0 e*
xf*
0g*
0h*
0i*
0j*
0k*
0l*
0m*
0n*
0o*
0p*
0q*
b10001000100111101001110010101000101111101000011010000010101001001000101 r*
b1000001010101010101010001001111 s*
1w*
1x*
0y*
0z*
1{*
xX+
bx Y+
xZ+
x[+
bx \+
x]+
x^+
bx _+
x`+
xa+
bx b+
xc+
xd+
bx e+
xf+
xg+
bx h+
xi+
xj+
bx k+
xl+
xm+
bx n+
xo+
xp+
bx q+
xr+
xs+
bx t+
xu+
xv+
bx w+
xx+
xy+
bx z+
x{+
x|+
bx }+
x~+
x!,
bx ",
x#,
x$,
bx %,
x&,
x',
bx (,
x),
x*,
bx +,
x,,
x-,
bx .,
x/,
x0,
bx 1,
x2,
x3,
bx 4,
x5,
x6,
bx 7,
x8,
x9,
bx :,
x;,
x<,
bx =,
x>,
x?,
bx @,
xA,
xB,
bx C,
xD,
xE,
bx F,
xG,
xH,
bx I,
xJ,
xK,
bx L,
xM,
xN,
bx O,
xP,
xQ,
bx R,
xS,
xT,
bx U,
xV,
xW,
bx X,
xY,
xZ,
bx [,
x\,
x],
bx ^,
x_,
x`,
bx a,
xb,
xc,
bx d,
xe,
xf,
bx g,
xh,
xi,
bx j,
xk,
xl,
bx m,
xn,
xo,
bx p,
xq,
xr,
bx s,
xt,
xu,
bx v,
xw,
xx,
bx y,
xz,
x{,
bx |,
x},
x~,
bx !-
x"-
x#-
bx $-
x%-
x&-
bx '-
x(-
x)-
bx *-
x+-
x,-
bx --
x.-
x/-
bx 0-
x1-
x2-
bx 3-
x4-
x5-
bx 6-
x7-
x8-
bx 9-
x:-
x;-
bx <-
x=-
x>-
bx ?-
x@-
xA-
bx B-
xC-
xD-
bx E-
xF-
xG-
bx H-
xI-
xJ-
bx K-
xL-
xM-
bx N-
xO-
xP-
bx Q-
xR-
xS-
bx T-
xU-
xV-
bx W-
xX-
xY-
bx Z-
x[-
x\-
bx ]-
x^-
x_-
bx `-
xa-
b1100100 b-
b1000100 c-
b1100100 d-
bx e-
bx f-
b11100100110111101101101010111110110010001100001011101000110000100101110011011010110100101100110 u-
b11100100110111101101101010111110110010001100001011101000110000100101110011101100110010101110010 w-
b0 x-
b0 y-
b0 z-
b1100100 {-
b0 |-
b0 }-
b11010000110010101111000 ~-
b11010000110010101111000 !.
0".
0#.
0$.
0%.
1&.
1'.
1(.
1).
1*.
1+.
0,.
1-.
1..
0/.
00.
11.
02.
13.
14.
bx Q.
bx S.
bx T.
bx U.
bx V.
xW.
xX.
xY.
xZ.
x[.
x\.
b11100100110111101101101010111110110010001100001011101000110000100101110011011010110100101100110 r.
b11100100110111101101101010111110110010001100001011101000110000100101110011101100110010101110010 t.
b0 X/
bx Y/
bx Z/
bx [/
bx \/
bx ]/
bx ^/
bx _/
bx `/
bx a/
b100000 D!
b100000 g!
b100000 K"
b100000 /#
b100 q#
b100 w#
b100000 G$
b100000 +%
b100000 V&
b100 8'
b100000 $(
b1000 %(
b100000000 &(
b1 -(
b1 .(
b1 /(
b0 0(
b1 =(
b11 G(
b0 J(
b0 O(
b0 U(
b100000 -)
b1000 .)
b100000000 /)
b1 6)
b1 7)
b1 8)
b0 9)
b1 F)
b11 P)
b0 S)
b0 X)
b0 _)
b0 `)
b0 a)
b0 b)
b0 c)
b0 d)
b1000 e)
b0 f)
b0 g)
b0 h)
b1 i)
b1 j)
b0 k)
b0 l)
b0 m)
b0 n)
b0 o)
b1 p)
b0 q)
b0 r)
b0 s)
b0 t)
b0 u)
b1 v)
b0 w)
b0 x)
b0 y)
b0 z)
b0 {)
b0 |)
b0 })
b1 ~)
b1 !*
b1 "*
b0 #*
b0 $*
b0 %*
b1 &*
b0 '*
b0 (*
b0 )*
b1 **
b0 +*
b1 ,*
b10000110100110001001111010000110100101100110000 '(
b1001110010011110100111001000101 ((
b1001110010011110100111001000101 )(
b1001110010011110100111001000101 *(
b1001110010011110100111001000101 +(
b1001110010011110100111001000101 ,(
b10000110100110001001111010000110100101100110001 1(
b10000110100110001001111010000110100101100110001 2(
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 3(
b1001110010011110100111001000101 4(
b1001110010011110100111001000101 5(
b10000110100110001001111010000110100101100110001 6(
b10000110100110001001111010000110100101100110001 7(
b10000110100110001001111010000110100101100110001 8(
b1001110010011110100111001000101 9(
b1001110010011110100111001000101 :(
b1001110010011110100111001000101 ;(
b1001110010011110100111001000101 <(
b10000100101100101010000010000010101001101010011 >(
b10000100101100101010000010000010101001101010011 ?(
b10011100100111101010010010011010100000101001100 @(
b10011100100111101010010010011010100000101001100 A(
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 B(
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 C(
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 D(
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 E(
b100011001000001010011000101001101000101 F(
b100011001000001010011000101001101000101 H(
b10100100100111101001101 I(
b10001000100111101001110010101000101111101000011010000010101001001000101 K(
b1000001010101010101010001001111 L(
b11100100110111101101101010111110110010001100001011101000110000100101110011011010110100101100110 M(
b10101010100111001010101010100110100010101000100 N(
b10000110111100101100011011011000110111101101110011001010010000001010110 P(
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 Q(
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 R(
b10011110100011001000110 S(
b100011001000001010011000101001101000101 T(
b10000110100110001001111010000110100101100110000 0)
b1001110010011110100111001000101 1)
b1001110010011110100111001000101 2)
b1001110010011110100111001000101 3)
b1001110010011110100111001000101 4)
b1001110010011110100111001000101 5)
b10000110100110001001111010000110100101100110001 :)
b10000110100110001001111010000110100101100110001 ;)
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 <)
b1001110010011110100111001000101 =)
b1001110010011110100111001000101 >)
b10000110100110001001111010000110100101100110001 ?)
b10000110100110001001111010000110100101100110001 @)
b10000110100110001001111010000110100101100110001 A)
b1001110010011110100111001000101 B)
b1001110010011110100111001000101 C)
b1001110010011110100111001000101 D)
b1001110010011110100111001000101 E)
b10000100101100101010000010000010101001101010011 G)
b10000100101100101010000010000010101001101010011 H)
b10011100100111101010010010011010100000101001100 I)
b10011100100111101010010010011010100000101001100 J)
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 K)
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 L)
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 M)
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 N)
b100011001000001010011000101001101000101 O)
b100011001000001010011000101001101000101 Q)
b10100100100111101001101 R)
b10001000100111101001110010101000101111101000011010000010101001001000101 T)
b1000001010101010101010001001111 U)
b11100100110111101101101010111110110010001100001011101000110000100101110011011010110100101100110 V)
b10101010100111001010101010100110100010101000100 W)
b10000110111100101100011011011000110111101101110011001010010000001010110 Y)
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 Z)
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 [)
b10011110100011001000110 \)
b100011001000001010011000101001101000101 ])
b10011110100011001000110 ^)
bx 7'
b1000 t*
b100000000 6+
b10 7+
b0 8+
b0 9+
bx :+
bx ;+
b10 <+
bx =+
bx >+
bx ?+
bx @+
bx A+
bx B+
bx C+
bx D+
bx E+
bx F+
bx G+
bx H+
bx I+
bx J+
bx K+
bx L+
bx M+
bx N+
bx O+
bx P+
b0 Q+
bx R+
bx S+
bx T+
bx U+
bx g-
bx h-
bx i-
bx j-
bx k-
bx l-
bx m-
bx n-
bx o-
bx p-
bx q-
bx r-
bx s-
bx t-
b100000 v-
b100000 5.
b100000000 6.
b1101 7.
b10000000000000000000000000000011 8.
b10000000000000000000000000000100 9.
b11111111111111111111111111111111 :.
bx ;.
b11111111111111111111111111111111 <.
bx =.
bx >.
bx ?.
bx @.
b0 A.
b0 B.
b0 C.
b111011101101 D.
b0 E.
b0 F.
b0 G.
b0 H.
b0 I.
b0 J.
b0 K.
b0 L.
b10111111 M.
b0 N.
b0 O.
b0 P.
bx R.
bx ].
bx ^.
bx _.
bx `.
bx a.
bx b.
bx c.
bx d.
bx e.
bx f.
bx g.
bx h.
bx i.
bx j.
bx k.
bx l.
bx m.
bx n.
bx o.
bx p.
bx q.
b100000 s.
b0 V+
b0 W+
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
1u*
1v*
0|*
0}*
0~*
0!+
0"+
0#+
0$+
0%+
0&+
0'+
0(+
1)+
1*+
1++
1,+
1-+
1.+
1/+
10+
11+
12+
13+
14+
15+
0(
1)
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
0g
0i
0h
0k
0j
0l
0m
0p
0o
0n
0q
0r
0s
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
0y#
1u#
1t#
1s#
1r#
0-#
0,#
1+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0I"
0H"
1G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
1E!
0e!
0d!
1c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0k"
0j"
1i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0O#
0N#
1M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0}#
0|#
0{#
0z#
0#$
0"$
0!$
0~#
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0)%
0(%
0'%
1&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
04&
03&
02&
01&
00&
0/&
0v&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
x*'
x)'
1('
0''
0,'
0+'
0-'
1.'
0/'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0W(
0V(
1Y(
1X(
1z(
1y(
1x(
1w(
1v(
1u(
1t(
1s(
1r(
1q(
1p(
1o(
1n(
1m(
1l(
1k(
1j(
1i(
1h(
1g(
1f(
1e(
1d(
1c(
1b(
1a(
1`(
1_(
1^(
1](
1\(
1[(
1Z(
1")
1!)
1~(
1}(
1|(
1&)
1%)
0()
0')
1{(
0$)
0#)
0))
0,)
0+)
0*)
0u.
x7/
x6/
x5/
x4/
x3/
x2/
x1/
x0/
x//
x./
x-/
x,/
x+/
x*/
x)/
x(/
x'/
x&/
x%/
x$/
x#/
x"/
x!/
x~.
x}.
x|.
x{.
xz.
xy.
xx.
xw.
xv.
0W/
0V/
0U/
0T/
0S/
0R/
0Q/
0P/
0O/
0N/
0M/
0L/
0K/
0J/
0I/
0H/
0G/
0F/
0E/
0D/
0C/
0B/
0A/
0@/
0?/
0>/
0=/
0</
0;/
0:/
09/
08/
$end
#5000
1!
1(
b0 7'
1b*
1y*
1z*
1Q*
1U*
1O*
b11111111111111111111111111111111 -*
b11111111111111111111111111111111 =*
0f*
b11 `/
b1000010101010000011100011 8*
b1000010101010000011100011 7*
#10000
0"
0!
0)
0(
0b*
#15000
1!
1(
b100 f!
b1 7'
1b*
0Q*
b1000010101010000011100011 6*
b100 u
1#(
1"(
1|'
1{'
1z'
1t'
1r'
1p'
1n'
1i'
b100 U
1a'
1`'
1\'
1['
1Z'
1T'
1R'
1P'
1N'
1I'
1'"
b1000 J"
b1000010101010000011100011 /
b100 .
b100 '
b1000010101010000011100011 *
b1000 ;!
b1000010101010000011100011 #
0i"
1h"
0M#
1L#
1A'
b1000 p#
b1100 .#
b1100 <!
b1000 :!
0c!
1b!
1'%
1P
1O
1K
1J
1I
1C
1A
1?
1=
18
b10000 %'
b1010 v#
b1010 &'
b11 x#
b11 B!
b1010 A!
1|#
1z#
1#$
1"$
0|&
1|&
b111 ~&
b11 !'
0|&
b11100011 F$
b11100011 =!
b11 a
b111 ^
0b
1,'
1+'
1k%
1j%
1f%
1e%
1d%
1p
1o
1n
0.'
bx Q&
xR&
xS&
b0 Q&
0R&
1S&
1T&
0U&
b110 P&
b110 t
b110 W
0*'
1)'
#20000
0!
0(
0b*
#25000
1!
1(
b1000 f!
b110 9'
b10 7'
1b*
1Q*
b1 ?*
b110 4'
b1000 u
b1000 U
0'"
1&"
b1100 J"
b1000 .
b1000 '
b1100 ;!
1i"
1M#
0A'
1@'
b1100 p#
b10000 .#
b10000 <!
b1100 :!
1c!
0'%
0&%
1%%
16'
15'
b1000110000111111010000011100011 8*
b1000110000111111010000011100011 7*
#30000
0!
0(
0b*
#35000
1!
1(
b1100 f!
b11 7'
1b*
0Q*
b10 ?*
b1000110000111111010000011100011 6*
b1100 u
1q'
1o'
1m'
0i'
1h'
1g'
1c'
b1100 U
1Q'
1O'
1M'
0I'
1H'
1G'
1C'
1'"
b10000 J"
b1000110000111111010000011100011 /
b1100 .
b1100 '
b1000110000111111010000011100011 *
b10000 ;!
b1000110000111111010000011100011 #
0i"
0h"
1g"
0M#
0L#
1K#
1A'
b10000 p#
b10100 .#
b10100 <!
b10000 :!
0c!
0b!
1a!
1'%
1@
1>
1<
08
17
16
12
b1 $'
b100001 %'
b1111 v#
b1111 A!
1}#
1{#
06'
05'
b0 ~&
b0 !'
1|&
1z&
1{&
b1 y&
b11 ~&
b100001000000011100101 8*
b1 ]
1Y
1X
1b
b0 a
b11 ^
1m
1q
0,'
0+'
bx w&
b11100011 l%
b11100011 ?!
bx @!
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
1.'
1N&
1M&
1I&
1H&
1G&
0n
1k
bx Q&
xR&
xS&
xT&
xU&
b11100011 Q&
0R&
0S&
0T&
0U&
b11100011 O&
b0 P&
b0 t
b11100011 v
b11100011 V
b0 W
1o#
1n#
1j#
1i#
1h#
1v&
1u&
1q&
1p&
1o&
0)'
0('
b100001000000011100101 7*
#40000
0!
0(
0b*
#45000
1!
1(
b10000 f!
b100 7'
1b*
1Q*
b11 ?*
b100001000000011100101 6*
b10000 u
0"(
1!(
0t'
0q'
0p'
0o'
0n'
0h'
0g'
0c'
b10000 U
0`'
1_'
0T'
0Q'
0P'
0O'
0N'
0H'
0G'
0C'
0'"
0&"
1%"
b10100 J"
b100001000000011100101 /
b10000 .
b10000 '
b100001000000011100101 *
b10100 ;!
b100001000000011100101 #
1i"
1M#
0A'
0@'
1?'
b10100 p#
b11000 .#
b11000 <!
b10100 :!
1c!
0'%
1&%
0O
1N
0C
0@
0?
0>
0=
07
06
02
b0 $'
b1 %'
b0 v#
b1000 &'
b101 x#
b101 B!
b0 A!
0}#
0|#
0{#
0z#
0"$
1!$
16'
15'
11'
b0 y&
0z&
0{&
0|&
b0 ~&
1|&
b11 !'
b11100101 F$
b1101100000000101001111111100101 8*
b11100101 =!
b11 a
b0 ^
0Y
0X
b0 ]
1e
1,'
1+'
0j%
1i%
0m
0q
1l
1y#
b11100011 w&
b0 l%
b0 ?!
b11100011 @!
1C$
1B$
0A$
0@$
0?$
1>$
1=$
1<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0N&
0M&
0I&
0H&
0G&
0k
0p
0o
bx Q&
xR&
xS&
xT&
xU&
b0 Q&
0R&
1S&
b0 O&
b1xx P&
b1xx t
b0 v
b0 V
b1xx W
0o#
0n#
0j#
0i#
0h#
0v&
0u&
0q&
0p&
0o&
b0 w&
x*'
x)'
1('
b0 @!
0C$
0B$
0>$
0=$
0<$
b1101100000000101001111111100101 7*
#50000
0!
0(
0b*
#55000
1!
1(
b10100 f!
b1xx 9'
b101 7'
1b*
0Q*
b100 ?*
b1101100000000101001111111100101 6*
b1xx 4'
b10100 u
1y'
1x'
1w'
1v'
1u'
1p'
0m'
1g'
1f'
1d'
1c'
b10100 U
1Y'
1X'
1W'
1V'
1U'
1P'
0M'
1G'
1F'
1D'
1C'
1'"
b11000 J"
b1101100000000101001111111100101 /
b10100 .
b10100 '
b1101100000000101001111111100101 *
b11000 ;!
b1101100000000101001111111100101 #
0i"
1h"
0M#
1L#
1A'
b11000 p#
b11100 .#
b11100 <!
b11000 :!
0c!
1b!
1'%
1H
1G
1F
1E
1D
1?
0<
16
15
13
12
b11 $'
b0 %'
b10 v#
b1001 &'
b10 A!
1|#
0|&
b0 !'
06'
05'
01'
b1001111000111111010000011100011 8*
0e
b0 a
0b
0l
0,'
0+'
0y#
0.'
b1001111000111111010000011100011 7*
#60000
0!
0(
0b*
#65000
1!
1(
b11000 f!
b110 7'
1b*
1Q*
b101 ?*
b1001111000111111010000011100011 6*
b11000 u
1"(
0!(
0y'
0x'
0w'
0v'
0u'
1t'
1q'
1o'
1n'
1m'
1i'
1h'
0d'
b11000 U
1`'
0_'
0Y'
0X'
0W'
0V'
0U'
1T'
1Q'
1O'
1N'
1M'
1I'
1H'
0D'
0'"
1&"
b11100 J"
b1001111000111111010000011100011 /
b11000 .
b11000 '
b1001111000111111010000011100011 *
b11100 ;!
b1001111000111111010000011100011 #
1i"
1M#
0A'
1@'
b11100 p#
b100000 .#
b100000 <!
b11100 :!
1c!
0'%
0&%
0%%
1$%
1O
0N
0H
0G
0F
0E
0D
1C
1@
1>
1=
1<
18
17
03
b110001 %'
b1111 v#
b1010 &'
b11 x#
b11 B!
b1111 A!
1}#
1{#
1z#
1"$
0!$
x6'
x5'
b11100011 F$
b100001000000011100101 8*
b11100011 =!
1j%
0i%
b100001000000011100101 7*
#70000
0!
0(
0b*
#75000
1!
1(
b11100 f!
b111 7'
1b*
0Q*
b110 ?*
b100001000000011100101 6*
b11100 u
0"(
1!(
0t'
0q'
0p'
0o'
0n'
0i'
0h'
0g'
0f'
0c'
b11100 U
0`'
1_'
0T'
0Q'
0P'
0O'
0N'
0I'
0H'
0G'
0F'
0C'
1'"
b100000 J"
b100001000000011100101 /
b11100 .
b11100 '
b100001000000011100101 *
b100000 ;!
b100001000000011100101 #
0i"
0h"
0g"
1f"
0M#
0L#
0K#
1J#
1A'
b100000 p#
b100100 .#
b100100 <!
b100000 :!
0c!
0b!
0a!
1`!
1'%
0O
1N
0C
0@
0?
0>
0=
08
07
06
05
02
b0 $'
b1 %'
b0 v#
b1000 &'
b101 x#
b101 B!
b0 A!
0}#
0|#
0{#
0z#
0"$
1!$
06'
x6'
1|&
b11 !'
b11100101 F$
b1100100000000101001111111100101 8*
b11100101 =!
b11 a
1b
1,'
1+'
0j%
1i%
1.'
06'
x6'
x1'
xe
xl
xy#
b1100100000000101001111111100101 7*
#80000
0!
0(
0b*
#85000
1!
1(
b100000 f!
b1000 7'
1b*
1Q*
b111 ?*
b1100100000000101001111111100101 6*
b100000 u
1y'
1x'
1w'
1v'
1u'
1p'
0m'
1g'
1d'
1c'
b100000 U
1Y'
1X'
1W'
1V'
1U'
1P'
0M'
1G'
1D'
1C'
0'"
0&"
0%"
1$"
b100100 J"
b1100100000000101001111111100101 /
b100000 .
b100000 '
b1100100000000101001111111100101 *
b100100 ;!
b1100100000000101001111111100101 #
1i"
1M#
0A'
0@'
0?'
1>'
b100100 p#
b101000 .#
b101000 <!
b100100 :!
1c!
0'%
1&%
1H
1G
1F
1E
1D
1?
0<
16
13
12
b1 $'
b0 %'
b10 v#
b1001 &'
b10 A!
1|#
06'
05'
01'
0|&
b0 !'
1}&
1{&
b1 y&
b11 ~&
b11001000111101010000011100011 8*
b11 ^
b1 ]
1Y
1c
b0 a
0b
0e
1m
0,'
0+'
0l
0y#
b11100101 l%
b11100101 ?!
1/'
0.'
1N&
1L&
1I&
1H&
1G&
1k
1p
1o
b111111100101 F$
bx Q&
xR&
xS&
b11100101 Q&
0R&
0S&
0T&
0U&
b11100101 O&
b0 P&
b0 t
b11100101 v
b111111100101 =!
b11100101 V
b0 W
1c%
1b%
1a%
1`%
1o#
1m#
1j#
1i#
1h#
1v&
1t&
1q&
1p&
1o&
b11100101 w&
b111111100101 l%
0*'
0)'
0('
b111111100101 ?!
b11100101 @!
1C$
1A$
1>$
1=$
1<$
1F&
1E&
1D&
1C&
bx Q&
xR&
xS&
xT&
xU&
b111111100101 Q&
0R&
0S&
0T&
0U&
b111111100101 O&
b111111100101 v
b111111100101 V
1g#
1f#
1e#
1d#
1n&
1m&
1l&
1k&
b111111100101 w&
b111111100101 @!
1;$
1:$
19$
18$
b11001000111101010000011100011 7*
#90000
0!
0(
0b*
#95000
1!
1(
b100100 f!
b1001 7'
1b*
0Q*
b1000 ?*
b11001000111101010000011100011 6*
b100100 u
1"(
0!(
0y'
0x'
0w'
0v'
0u'
1t'
1o'
1n'
1m'
1i'
0g'
1f'
1e'
0d'
0c'
b100100 U
1`'
0_'
0Y'
0X'
0W'
0V'
0U'
1T'
1O'
1N'
1M'
1I'
0G'
1F'
1E'
0D'
0C'
1'"
b101000 J"
b11001000111101010000011100011 /
b100100 .
b100100 '
b11001000111101010000011100011 *
b101000 ;!
b11001000111101010000011100011 #
0i"
1h"
0M#
1L#
1A'
b101000 p#
b101100 .#
b101100 <!
b101000 :!
0c!
1b!
1'%
1O
0N
0H
0G
0F
0E
0D
1C
1>
1=
1<
18
06
15
14
03
02
b10 $'
b10001 %'
b1110 v#
b1010 &'
b11 x#
b11 B!
b1110 A!
1{#
1z#
1"$
0!$
x6'
x5'
x2'
b0 y&
0{&
0}&
b0 ~&
1"'
1#'
b10 y&
b11100011 F$
b100001000000011100101 8*
b11100011 =!
1_
1d
b0 ^
0c
0Y
b10 ]
xf
xT
1j%
0i%
0c%
0b%
0a%
0`%
1s
0m
b101100 *%
b0 l%
x-
x&
b0 ?!
b101100 C!
xu.
1-'
0/'
1,&
1+&
1)&
0N&
0L&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0k
1j
0p
0o
b11110101000001110001100 F$
bx Q&
xR&
xS&
xT&
xU&
b0 Q&
0R&
1S&
b0 O&
b1xx P&
06'
x6'
x0'
02'
0f
xZ
b1xx t
b0 v
b11110101000001110001100 =!
b0 V
b1xx W
0T
xr
0k%
0j%
1i%
1h%
0f%
0e%
1c%
1b%
1\%
1Z%
1X%
1W%
1V%
1U%
0o#
0m#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0v&
0t&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
b0 w&
b0x0x000 p#
0-
x*'
x)'
1('
0&
b0x0x000 :!
b0 @!
0u.
0C$
0A$
0>$
0=$
0<$
0;$
0:$
09$
08$
xb!
x`!
b100001000000011100101 7*
#100000
0!
0(
0b*
#105000
1!
1(
b0x0x000 f!
b1010 7'
1b*
1Q*
b1001 ?*
b100001000000011100101 6*
b0x0x000 u
0"(
1!(
0t'
0p'
0o'
0n'
0i'
0f'
0e'
b0x0x000 U
0`'
1_'
0T'
0P'
0O'
0N'
0I'
0F'
0E'
0'"
x&"
x$"
bx J"
b100001000000011100101 /
b0x0x000 .
b0x0x000 '
b100001000000011100101 *
bx ;!
b100001000000011100101 #
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
0A'
x@'
x>'
bx p#
bx .#
bx <!
bx :!
xe!
xd!
xc!
xa!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
bx *%
bx C!
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
0O
1N
0C
0?
0>
0=
08
05
04
b0 $'
b1 %'
b0 v#
b1000 &'
b101 x#
b101 B!
b0 A!
0|#
0{#
0z#
0"$
1!$
b0 y&
0"'
0#'
1|&
b11 !'
06'
x6'
b10000100000001110010100 F$
bx Q&
xR&
xS&
b0 Q&
0R&
1S&
b1011100000000101001111111100101 8*
b10000100000001110010100 =!
b11 a
1b
0_
0d
b0 ]
1,'
1+'
0h%
1g%
0\%
0X%
0W%
0V%
0s
b0 *%
b0 C!
1.'
0-'
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0j
b11100101 F$
bx Q&
xR&
xS&
b0 Q&
0R&
1S&
06'
x6'
00'
x1'
xe
0Z
b11100101 =!
xl
0r
1k%
0g%
1f%
1e%
0c%
0b%
0Z%
0U%
xy#
b1011100000000101001111111100101 7*
#110000
0!
0(
0b*
#115000
1!
1(
bx f!
b1011 7'
1b*
0Q*
b0x0x0 ?*
b1011100000000101001111111100101 6*
bx u
1y'
1x'
1w'
1v'
1u'
1p'
0m'
1g'
1f'
1e'
1c'
bx U
1Y'
1X'
1W'
1V'
1U'
1P'
0M'
1G'
1F'
1E'
1C'
x)"
x("
x'"
x%"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
b1011100000000101001111111100101 /
bx .
bx '
b1011100000000101001111111100101 *
b1011100000000101001111111100101 #
xA'
x?'
x='
x<'
x;'
x:'
1H
1G
1F
1E
1D
1?
0<
16
15
14
12
b11 $'
b0 %'
b10 v#
b1001 &'
b10 A!
1|#
06'
x6'
0|&
b0 !'
bx 8*
b0 a
0b
0,'
0+'
0.'
06'
x6'
01'
0e
0l
0y#
bx 7*
#120000
0!
0(
0b*
#125000
1!
1(
b1100 7'
1b*
1Q*
bx ?*
bx 6*
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
bx /
bx *
bx #
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
bx $'
bx %'
bx v#
bx &'
bx x#
bx B!
bx A!
x}#
x|#
x{#
xz#
x#$
x"$
x!$
x~#
bx E$
bx D$
bx >!
bx w
bx R
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
bx *%
bx l%
bx +
bx $
bx ?!
bx C!
xW/
xV/
xU/
xT/
xS/
xR/
xQ/
xP/
xO/
xN/
xM/
xL/
xK/
xJ/
xI/
xH/
xG/
xF/
xE/
xD/
xC/
xB/
xA/
x@/
x?/
x>/
x=/
x</
x;/
x:/
x9/
x8/
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
bx Q&
xR&
xS&
bx O&
bx P&
06'
x6'
bx x&
bx y&
xz&
x{&
x|&
x}&
bx ~&
x"'
x#'
bx !'
b0xxxxxxxx F$
b0xxxxxxxx =!
bx a
x_
xd
bx ^
xc
xb
xY
xX
bx ]
bx \
bx t
bx v
bx V
bx W
xs
xm
xq
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xi
xh
x,'
x+'
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
bx w&
x('
x''
bx @!
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x-'
x/'
x.'
xk
xj
xp
xo
xn
bx F$
06'
x6'
x0'
x1'
x2'
xf
xe
xZ
bx =!
xT
xl
xr
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xy#
x-
x&
xu.
#130000
0!
0(
0b*
#135000
1!
1(
b1101 7'
1b*
0Q*
#140000
0!
0(
0b*
#145000
1!
1(
b1110 7'
1b*
1Q*
#150000
0!
0(
0b*
#155000
1!
1(
b1111 7'
1b*
0Q*
#160000
0!
0(
0b*
#165000
1!
1(
b10000 7'
1b*
1Q*
#170000
0!
0(
0b*
#175000
1!
1(
b10001 7'
1b*
0Q*
#180000
0!
0(
0b*
#185000
1!
1(
b10010 7'
1b*
1Q*
#190000
0!
0(
0b*
#195000
1!
1(
b10011 7'
1b*
0Q*
#200000
0!
0(
0b*
#205000
1!
1(
b10100 7'
1b*
1Q*
#210000
0!
0(
0b*
#215000
1!
1(
b10101 7'
1b*
0Q*
#220000
0!
0(
0b*
#225000
1!
1(
b10110 7'
1b*
1Q*
#230000
0!
0(
0b*
#235000
1!
1(
b10111 7'
1b*
0Q*
#240000
0!
0(
0b*
#245000
1!
1(
b11000 7'
1b*
1Q*
#250000
0!
0(
0b*
#255000
1!
1(
b11001 7'
1b*
0Q*
#260000
0!
0(
0b*
#265000
1!
1(
b11010 7'
1b*
1Q*
#270000
0!
0(
0b*
#275000
1!
1(
b11011 7'
1b*
0Q*
#280000
0!
0(
0b*
#285000
1!
1(
b11100 7'
1b*
1Q*
#290000
0!
0(
0b*
#295000
1!
1(
b11101 7'
1b*
0Q*
#300000
0!
0(
0b*
#305000
1!
1(
b11110 7'
1b*
1Q*
#310000
0!
0(
0b*
#315000
1!
1(
b11111 7'
1b*
0Q*
#320000
0!
0(
0b*
#325000
1!
1(
b100000 7'
1b*
1Q*
#330000
0!
0(
0b*
#335000
1!
1(
b100001 7'
1b*
0Q*
#340000
0!
0(
0b*
#345000
1!
1(
b100010 7'
1b*
1Q*
#350000
0!
0(
0b*
#355000
1!
1(
b100011 7'
1b*
0Q*
#360000
0!
0(
0b*
#365000
1!
1(
b100100 7'
1b*
1Q*
#370000
0!
0(
0b*
#375000
1!
1(
b100101 7'
1b*
0Q*
#380000
0!
0(
0b*
#385000
1!
1(
b100110 7'
1b*
1Q*
#390000
0!
0(
0b*
#395000
1!
1(
b100111 7'
1b*
0Q*
#400000
0!
0(
0b*
#405000
1!
1(
b101000 7'
1b*
1Q*
#410000
0!
0(
0b*
#415000
1!
1(
b101001 7'
1b*
0Q*
#420000
0!
0(
0b*
#425000
1!
1(
b101010 7'
1b*
1Q*
#430000
0!
0(
0b*
#435000
1!
1(
b101011 7'
1b*
0Q*
#440000
0!
0(
0b*
#445000
1!
1(
b101100 7'
1b*
1Q*
#450000
0!
0(
0b*
#455000
1!
1(
b101101 7'
1b*
0Q*
#460000
0!
0(
0b*
#465000
1!
1(
b101110 7'
1b*
1Q*
#470000
0!
0(
0b*
#475000
1!
1(
b101111 7'
1b*
0Q*
#480000
0!
0(
0b*
#485000
1!
1(
b110000 7'
1b*
1Q*
#490000
0!
0(
0b*
#495000
1!
1(
b110001 7'
1b*
0Q*
#500000
0!
0(
0b*
#505000
1!
1(
b110010 7'
1b*
1Q*
#510000
0!
0(
0b*
#515000
1!
1(
b110011 7'
1b*
0Q*
#520000
0!
0(
0b*
#525000
1!
1(
b110100 7'
1b*
1Q*
#530000
0!
0(
0b*
#535000
1!
1(
b110101 7'
1b*
0Q*
#540000
0!
0(
0b*
#545000
1!
1(
b110110 7'
1b*
1Q*
